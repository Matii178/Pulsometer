
Pulsometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080046f8  080046f8  000146f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004778  08004778  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004778  08004778  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004778  08004778  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004778  08004778  00014778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800477c  0800477c  0001477c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000068  080047e8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  080047e8  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e1a6  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000226c  00000000  00000000  0002e27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e00  00000000  00000000  000304e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aec  00000000  00000000  000312e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019141  00000000  00000000  00031dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff03  00000000  00000000  0004af15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009127d  00000000  00000000  0005ae18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042f0  00000000  00000000  000ec098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000f0388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	080046e0 	.word	0x080046e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	080046e0 	.word	0x080046e0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000934:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000938:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	2b00      	cmp	r3, #0
 8000942:	d013      	beq.n	800096c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000944:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000948:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800094c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00b      	beq.n	800096c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000954:	e000      	b.n	8000958 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000956:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000958:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d0f9      	beq.n	8000956 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000962:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800096c:	687b      	ldr	r3, [r7, #4]
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	ITM_SendChar(chr);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ffd2 	bl	800092c <ITM_SendChar>
	return 1;
 8000988:	2301      	movs	r3, #1
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	0000      	movs	r0, r0
 8000994:	0000      	movs	r0, r0
	...

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint16_t tim_val_1 = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	80fb      	strh	r3, [r7, #6]
	uint16_t result = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	82fb      	strh	r3, [r7, #22]
	uint8_t pulse = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	717b      	strb	r3, [r7, #5]
	uint8_t falling_edge_counter = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	757b      	strb	r3, [r7, #21]
	uint8_t mean_pulse_counter = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	753b      	strb	r3, [r7, #20]
	uint8_t start_result_counter = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	74fb      	strb	r3, [r7, #19]
	uint8_t previous_edge = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	74bb      	strb	r3, [r7, #18]
	uint8_t falling_edge = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	747b      	strb	r3, [r7, #17]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009be:	f000 fcf1 	bl	80013a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c2:	f000 f8dd 	bl	8000b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c6:	f000 fa37 	bl	8000e38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009ca:	f000 fa0b 	bl	8000de4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80009ce:	f000 f92f 	bl	8000c30 <MX_ADC1_Init>
  MX_TIM3_Init();
 80009d2:	f000 f96b 	bl	8000cac <MX_TIM3_Init>
  MX_TIM4_Init();
 80009d6:	f000 f9b7 	bl	8000d48 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 80009da:	485f      	ldr	r0, [pc, #380]	; (8000b58 <main+0x1c0>)
 80009dc:	f001 f93a 	bl	8001c54 <HAL_ADCEx_Calibration_Start>

  while (1)
  {
	  //If user has pressed the button, start the measurement.
	  //If user had already pressed the button before, stop the measurement.
	  if(button_pressed) {
 80009e0:	4b5e      	ldr	r3, [pc, #376]	; (8000b5c <main+0x1c4>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d018      	beq.n	8000a1c <main+0x84>

		  if(HAL_TIM_Base_GetState(&htim3) == HAL_TIM_STATE_READY) {
 80009ea:	485d      	ldr	r0, [pc, #372]	; (8000b60 <main+0x1c8>)
 80009ec:	f002 fce4 	bl	80033b8 <HAL_TIM_Base_GetState>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d106      	bne.n	8000a04 <main+0x6c>

			  HAL_TIM_Base_Start(&htim3);
 80009f6:	485a      	ldr	r0, [pc, #360]	; (8000b60 <main+0x1c8>)
 80009f8:	f002 fa72 	bl	8002ee0 <HAL_TIM_Base_Start>
			  HAL_ADC_Start_IT(&hadc1);
 80009fc:	4856      	ldr	r0, [pc, #344]	; (8000b58 <main+0x1c0>)
 80009fe:	f000 fe0b 	bl	8001618 <HAL_ADC_Start_IT>
 8000a02:	e008      	b.n	8000a16 <main+0x7e>

		  } else if(HAL_TIM_Base_GetState(&htim3) == HAL_TIM_STATE_BUSY) {
 8000a04:	4856      	ldr	r0, [pc, #344]	; (8000b60 <main+0x1c8>)
 8000a06:	f002 fcd7 	bl	80033b8 <HAL_TIM_Base_GetState>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d102      	bne.n	8000a16 <main+0x7e>

			  HAL_TIM_Base_Stop(&htim3);
 8000a10:	4853      	ldr	r0, [pc, #332]	; (8000b60 <main+0x1c8>)
 8000a12:	f002 faaf 	bl	8002f74 <HAL_TIM_Base_Stop>

		  }

		  button_pressed = 0;
 8000a16:	4b51      	ldr	r3, [pc, #324]	; (8000b5c <main+0x1c4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
	  }

	  //If there is a new sample in the buffer, check for falling edge possibilities
	  if(measurement_flag) {
 8000a1c:	4b51      	ldr	r3, [pc, #324]	; (8000b64 <main+0x1cc>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d02f      	beq.n	8000a86 <main+0xee>

		  falling_edge_counter = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	757b      	strb	r3, [r7, #21]

		  //check last 10 samples, if at least 7 of them are higher than the new one, a falling edge has occured.
		  for(int i = 1; i < 11; i++) {
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	e01a      	b.n	8000a66 <main+0xce>
			  if(circ_buffer[(counter - i) & 127] - 50 > circ_buffer[counter]) { //need to check ENOB for typical value of noise. Right now, empirically set to 50 to ignore the noise.
 8000a30:	4b4d      	ldr	r3, [pc, #308]	; (8000b68 <main+0x1d0>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	461a      	mov	r2, r3
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a40:	4a4a      	ldr	r2, [pc, #296]	; (8000b6c <main+0x1d4>)
 8000a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a46:	3b32      	subs	r3, #50	; 0x32
 8000a48:	4a47      	ldr	r2, [pc, #284]	; (8000b68 <main+0x1d0>)
 8000a4a:	8812      	ldrh	r2, [r2, #0]
 8000a4c:	b292      	uxth	r2, r2
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4a46      	ldr	r2, [pc, #280]	; (8000b6c <main+0x1d4>)
 8000a52:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000a56:	4293      	cmp	r3, r2
 8000a58:	dd02      	ble.n	8000a60 <main+0xc8>
				  falling_edge_counter++;
 8000a5a:	7d7b      	ldrb	r3, [r7, #21]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	757b      	strb	r3, [r7, #21]
		  for(int i = 1; i < 11; i++) {
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	3301      	adds	r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	2b0a      	cmp	r3, #10
 8000a6a:	dde1      	ble.n	8000a30 <main+0x98>
			  }
		  }

		  if (falling_edge_counter > 6) {
 8000a6c:	7d7b      	ldrb	r3, [r7, #21]
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	d902      	bls.n	8000a78 <main+0xe0>

			  falling_edge = 1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	747b      	strb	r3, [r7, #17]
 8000a76:	e003      	b.n	8000a80 <main+0xe8>

		  } else {

			  falling_edge = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	747b      	strb	r3, [r7, #17]
			  previous_edge = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	74bb      	strb	r3, [r7, #18]

		  }

		  measurement_flag = 0;
 8000a80:	4b38      	ldr	r3, [pc, #224]	; (8000b64 <main+0x1cc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
	  }

	  //if falling edge has just occured.
	  if(falling_edge == 1 && previous_edge == 0) {
 8000a86:	7c7b      	ldrb	r3, [r7, #17]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d1a9      	bne.n	80009e0 <main+0x48>
 8000a8c:	7cbb      	ldrb	r3, [r7, #18]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d1a6      	bne.n	80009e0 <main+0x48>

		  previous_edge = 1;
 8000a92:	2301      	movs	r3, #1
 8000a94:	74bb      	strb	r3, [r7, #18]

		  //Start the timer to count time from first falling edge to the other.
		  //If the timer4 is already running, check the time between two falling edges.
		  if(HAL_TIM_Base_GetState(&htim4) == HAL_TIM_STATE_READY) {
 8000a96:	4836      	ldr	r0, [pc, #216]	; (8000b70 <main+0x1d8>)
 8000a98:	f002 fc8e 	bl	80033b8 <HAL_TIM_Base_GetState>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d103      	bne.n	8000aaa <main+0x112>

			  HAL_TIM_Base_Start(&htim4);
 8000aa2:	4833      	ldr	r0, [pc, #204]	; (8000b70 <main+0x1d8>)
 8000aa4:	f002 fa1c 	bl	8002ee0 <HAL_TIM_Base_Start>
 8000aa8:	e79a      	b.n	80009e0 <main+0x48>

		  } else if(HAL_TIM_Base_GetState(&htim4) == HAL_TIM_STATE_BUSY) {
 8000aaa:	4831      	ldr	r0, [pc, #196]	; (8000b70 <main+0x1d8>)
 8000aac:	f002 fc84 	bl	80033b8 <HAL_TIM_Base_GetState>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d194      	bne.n	80009e0 <main+0x48>

			  //waiting for mean_pulse circular buffer to fill with some values.
			  if(start_result_counter < 8){
 8000ab6:	7cfb      	ldrb	r3, [r7, #19]
 8000ab8:	2b07      	cmp	r3, #7
 8000aba:	d802      	bhi.n	8000ac2 <main+0x12a>
				  start_result_counter++;
 8000abc:	7cfb      	ldrb	r3, [r7, #19]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	74fb      	strb	r3, [r7, #19]
			  }

			  //checking CNT register of TIM4 to measure the time needed to calculate heart bpm
			  tim_val_1 = TIM4->CNT;
 8000ac2:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <main+0x1dc>)
 8000ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac6:	80fb      	strh	r3, [r7, #6]
			  pulse = 60000.0/(tim_val_1);
 8000ac8:	88fb      	ldrh	r3, [r7, #6]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fc92 	bl	80003f4 <__aeabi_i2d>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	a11e      	add	r1, pc, #120	; (adr r1, 8000b50 <main+0x1b8>)
 8000ad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ada:	f7ff fe1f 	bl	800071c <__aeabi_ddiv>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f7ff ff01 	bl	80008ec <__aeabi_d2uiz>
 8000aea:	4603      	mov	r3, r0
 8000aec:	717b      	strb	r3, [r7, #5]

			  //filling mean_pulse circular buffer with calculated heart bpm value.
			  mean_pulse[mean_pulse_counter++] = pulse;
 8000aee:	7d3b      	ldrb	r3, [r7, #20]
 8000af0:	1c5a      	adds	r2, r3, #1
 8000af2:	753a      	strb	r2, [r7, #20]
 8000af4:	461a      	mov	r2, r3
 8000af6:	797b      	ldrb	r3, [r7, #5]
 8000af8:	b299      	uxth	r1, r3
 8000afa:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <main+0x1e0>)
 8000afc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  mean_pulse_counter &= MEAN_PULSE_MASK;
 8000b00:	7d3b      	ldrb	r3, [r7, #20]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	753b      	strb	r3, [r7, #20]

			  //if the buffer has already filled with values, calculate mean of the values from it to gain the final result of heart bpm.
			  if(start_result_counter == 8) {
 8000b08:	7cfb      	ldrb	r3, [r7, #19]
 8000b0a:	2b08      	cmp	r3, #8
 8000b0c:	d119      	bne.n	8000b42 <main+0x1aa>

				  for(int i = 0; i < 8; i++) {
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	e009      	b.n	8000b28 <main+0x190>
					  result += mean_pulse[i];
 8000b14:	4a18      	ldr	r2, [pc, #96]	; (8000b78 <main+0x1e0>)
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b1c:	8afb      	ldrh	r3, [r7, #22]
 8000b1e:	4413      	add	r3, r2
 8000b20:	82fb      	strh	r3, [r7, #22]
				  for(int i = 0; i < 8; i++) {
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	3301      	adds	r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	2b07      	cmp	r3, #7
 8000b2c:	ddf2      	ble.n	8000b14 <main+0x17c>
				  }

				  result /= 8;
 8000b2e:	8afb      	ldrh	r3, [r7, #22]
 8000b30:	08db      	lsrs	r3, r3, #3
 8000b32:	82fb      	strh	r3, [r7, #22]
				  printf("bpm: %d \n", result);
 8000b34:	8afb      	ldrh	r3, [r7, #22]
 8000b36:	4619      	mov	r1, r3
 8000b38:	4810      	ldr	r0, [pc, #64]	; (8000b7c <main+0x1e4>)
 8000b3a:	f002 ff53 	bl	80039e4 <iprintf>
				  result = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	82fb      	strh	r3, [r7, #22]

			  }

			  //start from the beginning by clearing TIM4 CNT register.
			  TIM4->CNT = 0;
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <main+0x1dc>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	625a      	str	r2, [r3, #36]	; 0x24
	  if(button_pressed) {
 8000b48:	e74a      	b.n	80009e0 <main+0x48>
 8000b4a:	bf00      	nop
 8000b4c:	f3af 8000 	nop.w
 8000b50:	00000000 	.word	0x00000000
 8000b54:	40ed4c00 	.word	0x40ed4c00
 8000b58:	20000084 	.word	0x20000084
 8000b5c:	20000191 	.word	0x20000191
 8000b60:	200000b4 	.word	0x200000b4
 8000b64:	20000190 	.word	0x20000190
 8000b68:	2000018e 	.word	0x2000018e
 8000b6c:	20000194 	.word	0x20000194
 8000b70:	200000fc 	.word	0x200000fc
 8000b74:	40000800 	.word	0x40000800
 8000b78:	20000294 	.word	0x20000294
 8000b7c:	080046f8 	.word	0x080046f8

08000b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b094      	sub	sp, #80	; 0x50
 8000b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b8a:	2228      	movs	r2, #40	; 0x28
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f002 ff7d 	bl	8003a8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb8:	2310      	movs	r3, #16
 8000bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000bc4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fbba 	bl	8002348 <HAL_RCC_OscConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000bda:	f000 f9df 	bl	8000f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bde:	230f      	movs	r3, #15
 8000be0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 fe26 	bl	800284c <HAL_RCC_ClockConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c06:	f000 f9c9 	bl	8000f9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000c0e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c12:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	4618      	mov	r0, r3
 8000c18:	f001 ffa6 	bl	8002b68 <HAL_RCCEx_PeriphCLKConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c22:	f000 f9bb 	bl	8000f9c <Error_Handler>
  }
}
 8000c26:	bf00      	nop
 8000c28:	3750      	adds	r7, #80	; 0x50
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_ADC1_Init+0x74>)
 8000c42:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <MX_ADC1_Init+0x78>)
 8000c44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_ADC1_Init+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_ADC1_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_ADC1_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_ADC1_Init+0x74>)
 8000c5a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c60:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <MX_ADC1_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_ADC1_Init+0x74>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <MX_ADC1_Init+0x74>)
 8000c6e:	f000 fbfb 	bl	8001468 <HAL_ADC_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c78:	f000 f990 	bl	8000f9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000c84:	2303      	movs	r3, #3
 8000c86:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_ADC1_Init+0x74>)
 8000c8e:	f000 fe4d 	bl	800192c <HAL_ADC_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c98:	f000 f980 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000084 	.word	0x20000084
 8000ca8:	40012400 	.word	0x40012400

08000cac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <MX_TIM3_Init+0x94>)
 8000cca:	4a1e      	ldr	r2, [pc, #120]	; (8000d44 <MX_TIM3_Init+0x98>)
 8000ccc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <MX_TIM3_Init+0x94>)
 8000cd0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000cd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <MX_TIM3_Init+0x94>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <MX_TIM3_Init+0x94>)
 8000cde:	2213      	movs	r2, #19
 8000ce0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <MX_TIM3_Init+0x94>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_TIM3_Init+0x94>)
 8000cea:	2280      	movs	r2, #128	; 0x80
 8000cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cee:	4814      	ldr	r0, [pc, #80]	; (8000d40 <MX_TIM3_Init+0x94>)
 8000cf0:	f002 f8a6 	bl	8002e40 <HAL_TIM_Base_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000cfa:	f000 f94f 	bl	8000f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d04:	f107 0308 	add.w	r3, r7, #8
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480d      	ldr	r0, [pc, #52]	; (8000d40 <MX_TIM3_Init+0x94>)
 8000d0c:	f002 fa60 	bl	80031d0 <HAL_TIM_ConfigClockSource>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000d16:	f000 f941 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d1a:	2320      	movs	r3, #32
 8000d1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d22:	463b      	mov	r3, r7
 8000d24:	4619      	mov	r1, r3
 8000d26:	4806      	ldr	r0, [pc, #24]	; (8000d40 <MX_TIM3_Init+0x94>)
 8000d28:	f002 fc4c 	bl	80035c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000d32:	f000 f933 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200000b4 	.word	0x200000b4
 8000d44:	40000400 	.word	0x40000400

08000d48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d64:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <MX_TIM4_Init+0x94>)
 8000d66:	4a1e      	ldr	r2, [pc, #120]	; (8000de0 <MX_TIM4_Init+0x98>)
 8000d68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63999;
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <MX_TIM4_Init+0x94>)
 8000d6c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000d70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_TIM4_Init+0x94>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_TIM4_Init+0x94>)
 8000d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_TIM4_Init+0x94>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_TIM4_Init+0x94>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d8c:	4813      	ldr	r0, [pc, #76]	; (8000ddc <MX_TIM4_Init+0x94>)
 8000d8e:	f002 f857 	bl	8002e40 <HAL_TIM_Base_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000d98:	f000 f900 	bl	8000f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000da2:	f107 0308 	add.w	r3, r7, #8
 8000da6:	4619      	mov	r1, r3
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <MX_TIM4_Init+0x94>)
 8000daa:	f002 fa11 	bl	80031d0 <HAL_TIM_ConfigClockSource>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000db4:	f000 f8f2 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db8:	2300      	movs	r3, #0
 8000dba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_TIM4_Init+0x94>)
 8000dc6:	f002 fbfd 	bl	80035c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000dd0:	f000 f8e4 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	200000fc 	.word	0x200000fc
 8000de0:	40000800 	.word	0x40000800

08000de4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <MX_USART2_UART_Init+0x50>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e1c:	f002 fc42 	bl	80036a4 <HAL_UART_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e26:	f000 f8b9 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000144 	.word	0x20000144
 8000e34:	40004400 	.word	0x40004400

08000e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <MX_GPIO_Init+0xcc>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a2c      	ldr	r2, [pc, #176]	; (8000f04 <MX_GPIO_Init+0xcc>)
 8000e52:	f043 0310 	orr.w	r3, r3, #16
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <MX_GPIO_Init+0xcc>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0310 	and.w	r3, r3, #16
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_GPIO_Init+0xcc>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a26      	ldr	r2, [pc, #152]	; (8000f04 <MX_GPIO_Init+0xcc>)
 8000e6a:	f043 0320 	orr.w	r3, r3, #32
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_GPIO_Init+0xcc>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f003 0320 	and.w	r3, r3, #32
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_GPIO_Init+0xcc>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a20      	ldr	r2, [pc, #128]	; (8000f04 <MX_GPIO_Init+0xcc>)
 8000e82:	f043 0304 	orr.w	r3, r3, #4
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_GPIO_Init+0xcc>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_GPIO_Init+0xcc>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a1a      	ldr	r2, [pc, #104]	; (8000f04 <MX_GPIO_Init+0xcc>)
 8000e9a:	f043 0308 	orr.w	r3, r3, #8
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_GPIO_Init+0xcc>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2120      	movs	r1, #32
 8000eb0:	4815      	ldr	r0, [pc, #84]	; (8000f08 <MX_GPIO_Init+0xd0>)
 8000eb2:	f001 fa19 	bl	80022e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <MX_GPIO_Init+0xd4>)
 8000ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4811      	ldr	r0, [pc, #68]	; (8000f10 <MX_GPIO_Init+0xd8>)
 8000ecc:	f001 f888 	bl	8001fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ed0:	2320      	movs	r3, #32
 8000ed2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2302      	movs	r3, #2
 8000ede:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4808      	ldr	r0, [pc, #32]	; (8000f08 <MX_GPIO_Init+0xd0>)
 8000ee8:	f001 f87a 	bl	8001fe0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2028      	movs	r0, #40	; 0x28
 8000ef2:	f001 f83e 	bl	8001f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ef6:	2028      	movs	r0, #40	; 0x28
 8000ef8:	f001 f857 	bl	8001faa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000efc:	bf00      	nop
 8000efe:	3720      	adds	r7, #32
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010800 	.word	0x40010800
 8000f0c:	10110000 	.word	0x10110000
 8000f10:	40011000 	.word	0x40011000

08000f14 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80fb      	strh	r3, [r7, #6]

	//would be fine to debounce
	button_pressed = 1;
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]

}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000191 	.word	0x20000191

08000f34 <HAL_ADC_ConvCpltCallback>:

void	HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

	circ_buffer[counter++] = HAL_ADC_GetValue(hadc);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 fc21 	bl	8001784 <HAL_ADC_GetValue>
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_ADC_ConvCpltCallback+0x58>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	b291      	uxth	r1, r2
 8000f4c:	4a0f      	ldr	r2, [pc, #60]	; (8000f8c <HAL_ADC_ConvCpltCallback+0x58>)
 8000f4e:	8011      	strh	r1, [r2, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	b281      	uxth	r1, r0
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000f56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	counter &= CIRC_BUFFER_MASK;
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_ADC_ConvCpltCallback+0x58>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_ADC_ConvCpltCallback+0x58>)
 8000f68:	801a      	strh	r2, [r3, #0]

	pulseDB = circ_buffer[counter]; //used to depict current pulse signal in debugger
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_ADC_ConvCpltCallback+0x58>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000f74:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_ADC_ConvCpltCallback+0x60>)
 8000f7a:	801a      	strh	r2, [r3, #0]

	measurement_flag = 1;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_ADC_ConvCpltCallback+0x64>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]

}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000018e 	.word	0x2000018e
 8000f90:	20000194 	.word	0x20000194
 8000f94:	2000018c 	.word	0x2000018c
 8000f98:	20000190 	.word	0x20000190

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <Error_Handler+0x8>
	...

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_MspInit+0x5c>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	4a14      	ldr	r2, [pc, #80]	; (8001004 <HAL_MspInit+0x5c>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6193      	str	r3, [r2, #24]
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_MspInit+0x5c>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <HAL_MspInit+0x5c>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <HAL_MspInit+0x5c>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	61d3      	str	r3, [r2, #28]
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <HAL_MspInit+0x5c>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_MspInit+0x60>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <HAL_MspInit+0x60>)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	40021000 	.word	0x40021000
 8001008:	40010000 	.word	0x40010000

0800100c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a18      	ldr	r2, [pc, #96]	; (8001088 <HAL_ADC_MspInit+0x7c>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d129      	bne.n	8001080 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_ADC_MspInit+0x80>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a16      	ldr	r2, [pc, #88]	; (800108c <HAL_ADC_MspInit+0x80>)
 8001032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <HAL_ADC_MspInit+0x80>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_ADC_MspInit+0x80>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a10      	ldr	r2, [pc, #64]	; (800108c <HAL_ADC_MspInit+0x80>)
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_ADC_MspInit+0x80>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800105c:	2301      	movs	r3, #1
 800105e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001060:	2303      	movs	r3, #3
 8001062:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	4619      	mov	r1, r3
 800106a:	4809      	ldr	r0, [pc, #36]	; (8001090 <HAL_ADC_MspInit+0x84>)
 800106c:	f000 ffb8 	bl	8001fe0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	2012      	movs	r0, #18
 8001076:	f000 ff7c 	bl	8001f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800107a:	2012      	movs	r0, #18
 800107c:	f000 ff95 	bl	8001faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40012400 	.word	0x40012400
 800108c:	40021000 	.word	0x40021000
 8001090:	40010800 	.word	0x40010800

08001094 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a16      	ldr	r2, [pc, #88]	; (80010fc <HAL_TIM_Base_MspInit+0x68>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d114      	bne.n	80010d0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_TIM_Base_MspInit+0x6c>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a15      	ldr	r2, [pc, #84]	; (8001100 <HAL_TIM_Base_MspInit+0x6c>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	61d3      	str	r3, [r2, #28]
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_TIM_Base_MspInit+0x6c>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	201d      	movs	r0, #29
 80010c4:	f000 ff55 	bl	8001f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010c8:	201d      	movs	r0, #29
 80010ca:	f000 ff6e 	bl	8001faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010ce:	e010      	b.n	80010f2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <HAL_TIM_Base_MspInit+0x70>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d10b      	bne.n	80010f2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_TIM_Base_MspInit+0x6c>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <HAL_TIM_Base_MspInit+0x6c>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	61d3      	str	r3, [r2, #28]
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_TIM_Base_MspInit+0x6c>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40000400 	.word	0x40000400
 8001100:	40021000 	.word	0x40021000
 8001104:	40000800 	.word	0x40000800

08001108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a15      	ldr	r2, [pc, #84]	; (8001178 <HAL_UART_MspInit+0x70>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d123      	bne.n	8001170 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_UART_MspInit+0x74>)
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	4a13      	ldr	r2, [pc, #76]	; (800117c <HAL_UART_MspInit+0x74>)
 800112e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001132:	61d3      	str	r3, [r2, #28]
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_UART_MspInit+0x74>)
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_UART_MspInit+0x74>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <HAL_UART_MspInit+0x74>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_UART_MspInit+0x74>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001158:	230c      	movs	r3, #12
 800115a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2302      	movs	r3, #2
 8001162:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	4619      	mov	r1, r3
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <HAL_UART_MspInit+0x78>)
 800116c:	f000 ff38 	bl	8001fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40004400 	.word	0x40004400
 800117c:	40021000 	.word	0x40021000
 8001180:	40010800 	.word	0x40010800

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001188:	e7fe      	b.n	8001188 <NMI_Handler+0x4>

0800118a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <MemManage_Handler+0x4>

08001196 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr

080011c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ca:	f000 f931 	bl	8001430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <ADC1_2_IRQHandler+0x10>)
 80011da:	f000 fadf 	bl	800179c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000084 	.word	0x20000084

080011e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <TIM3_IRQHandler+0x10>)
 80011ee:	f001 fee7 	bl	8002fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200000b4 	.word	0x200000b4

080011fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001200:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001204:	f001 f888 	bl	8002318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	e00a      	b.n	8001234 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800121e:	f3af 8000 	nop.w
 8001222:	4601      	mov	r1, r0
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	60ba      	str	r2, [r7, #8]
 800122a:	b2ca      	uxtb	r2, r1
 800122c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3301      	adds	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	429a      	cmp	r2, r3
 800123a:	dbf0      	blt.n	800121e <_read+0x12>
  }

  return len;
 800123c:	687b      	ldr	r3, [r7, #4]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	e009      	b.n	800126c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	60ba      	str	r2, [r7, #8]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fb89 	bl	8000978 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbf1      	blt.n	8001258 <_write+0x12>
  }
  return len;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <_close>:

int _close(int file)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a4:	605a      	str	r2, [r3, #4]
  return 0;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr

080012b2 <_isatty>:

int _isatty(int file)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b085      	sub	sp, #20
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
	...

080012e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e8:	4a14      	ldr	r2, [pc, #80]	; (800133c <_sbrk+0x5c>)
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <_sbrk+0x60>)
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <_sbrk+0x64>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d102      	bne.n	8001302 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <_sbrk+0x64>)
 80012fe:	4a12      	ldr	r2, [pc, #72]	; (8001348 <_sbrk+0x68>)
 8001300:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <_sbrk+0x64>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	429a      	cmp	r2, r3
 800130e:	d207      	bcs.n	8001320 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001310:	f002 fc0c 	bl	8003b2c <__errno>
 8001314:	4603      	mov	r3, r0
 8001316:	220c      	movs	r2, #12
 8001318:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	e009      	b.n	8001334 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001326:	4b07      	ldr	r3, [pc, #28]	; (8001344 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	4a05      	ldr	r2, [pc, #20]	; (8001344 <_sbrk+0x64>)
 8001330:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001332:	68fb      	ldr	r3, [r7, #12]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20005000 	.word	0x20005000
 8001340:	00000400 	.word	0x00000400
 8001344:	200002a4 	.word	0x200002a4
 8001348:	200003f8 	.word	0x200003f8

0800134c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001358:	f7ff fff8 	bl	800134c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800135c:	480b      	ldr	r0, [pc, #44]	; (800138c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800135e:	490c      	ldr	r1, [pc, #48]	; (8001390 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001360:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001364:	e002      	b.n	800136c <LoopCopyDataInit>

08001366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136a:	3304      	adds	r3, #4

0800136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001370:	d3f9      	bcc.n	8001366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001372:	4a09      	ldr	r2, [pc, #36]	; (8001398 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001374:	4c09      	ldr	r4, [pc, #36]	; (800139c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001378:	e001      	b.n	800137e <LoopFillZerobss>

0800137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137c:	3204      	adds	r2, #4

0800137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001380:	d3fb      	bcc.n	800137a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001382:	f002 fbd9 	bl	8003b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001386:	f7ff fb07 	bl	8000998 <main>
  bx lr
 800138a:	4770      	bx	lr
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001394:	08004780 	.word	0x08004780
  ldr r2, =_sbss
 8001398:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800139c:	200003f8 	.word	0x200003f8

080013a0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <CAN1_RX1_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_Init+0x28>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <HAL_Init+0x28>)
 80013ae:	f043 0310 	orr.w	r3, r3, #16
 80013b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b4:	2003      	movs	r0, #3
 80013b6:	f000 fdd1 	bl	8001f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f000 f808 	bl	80013d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c0:	f7ff fdf2 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40022000 	.word	0x40022000

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_InitTick+0x54>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_InitTick+0x58>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fde9 	bl	8001fc6 <HAL_SYSTICK_Config>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00e      	b.n	800141c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	d80a      	bhi.n	800141a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001404:	2200      	movs	r2, #0
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f000 fdb1 	bl	8001f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001410:	4a06      	ldr	r2, [pc, #24]	; (800142c <HAL_InitTick+0x5c>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e000      	b.n	800141c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000000 	.word	0x20000000
 8001428:	20000008 	.word	0x20000008
 800142c:	20000004 	.word	0x20000004

08001430 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_IncTick+0x1c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <HAL_IncTick+0x20>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4413      	add	r3, r2
 8001440:	4a03      	ldr	r2, [pc, #12]	; (8001450 <HAL_IncTick+0x20>)
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	20000008 	.word	0x20000008
 8001450:	200002a8 	.word	0x200002a8

08001454 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return uwTick;
 8001458:	4b02      	ldr	r3, [pc, #8]	; (8001464 <HAL_GetTick+0x10>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	200002a8 	.word	0x200002a8

08001468 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e0be      	b.n	8001608 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	2b00      	cmp	r3, #0
 8001496:	d109      	bne.n	80014ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fdb0 	bl	800100c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 fb8f 	bl	8001bd0 <ADC_ConversionStop_Disable>
 80014b2:	4603      	mov	r3, r0
 80014b4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f040 8099 	bne.w	80015f6 <HAL_ADC_Init+0x18e>
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f040 8095 	bne.w	80015f6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014d4:	f023 0302 	bic.w	r3, r3, #2
 80014d8:	f043 0202 	orr.w	r2, r3, #2
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7b1b      	ldrb	r3, [r3, #12]
 80014ee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014f0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001500:	d003      	beq.n	800150a <HAL_ADC_Init+0xa2>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d102      	bne.n	8001510 <HAL_ADC_Init+0xa8>
 800150a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800150e:	e000      	b.n	8001512 <HAL_ADC_Init+0xaa>
 8001510:	2300      	movs	r3, #0
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7d1b      	ldrb	r3, [r3, #20]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d119      	bne.n	8001554 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7b1b      	ldrb	r3, [r3, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d109      	bne.n	800153c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	3b01      	subs	r3, #1
 800152e:	035a      	lsls	r2, r3, #13
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	e00b      	b.n	8001554 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	f043 0220 	orr.w	r2, r3, #32
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154c:	f043 0201 	orr.w	r2, r3, #1
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	430a      	orrs	r2, r1
 8001566:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	4b28      	ldr	r3, [pc, #160]	; (8001610 <HAL_ADC_Init+0x1a8>)
 8001570:	4013      	ands	r3, r2
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	68b9      	ldr	r1, [r7, #8]
 8001578:	430b      	orrs	r3, r1
 800157a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001584:	d003      	beq.n	800158e <HAL_ADC_Init+0x126>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d104      	bne.n	8001598 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	3b01      	subs	r3, #1
 8001594:	051b      	lsls	r3, r3, #20
 8001596:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <HAL_ADC_Init+0x1ac>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d10b      	bne.n	80015d4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c6:	f023 0303 	bic.w	r3, r3, #3
 80015ca:	f043 0201 	orr.w	r2, r3, #1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015d2:	e018      	b.n	8001606 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	f023 0312 	bic.w	r3, r3, #18
 80015dc:	f043 0210 	orr.w	r2, r3, #16
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	f043 0201 	orr.w	r2, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015f4:	e007      	b.n	8001606 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	f043 0210 	orr.w	r2, r3, #16
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001606:	7dfb      	ldrb	r3, [r7, #23]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	ffe1f7fd 	.word	0xffe1f7fd
 8001614:	ff1f0efe 	.word	0xff1f0efe

08001618 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800162a:	2b01      	cmp	r3, #1
 800162c:	d101      	bne.n	8001632 <HAL_ADC_Start_IT+0x1a>
 800162e:	2302      	movs	r3, #2
 8001630:	e0a0      	b.n	8001774 <HAL_ADC_Start_IT+0x15c>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 fa6e 	bl	8001b1c <ADC_Enable>
 8001640:	4603      	mov	r3, r0
 8001642:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f040 808f 	bne.w	800176a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001650:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a45      	ldr	r2, [pc, #276]	; (800177c <HAL_ADC_Start_IT+0x164>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d105      	bne.n	8001676 <HAL_ADC_Start_IT+0x5e>
 800166a:	4b45      	ldr	r3, [pc, #276]	; (8001780 <HAL_ADC_Start_IT+0x168>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d115      	bne.n	80016a2 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800168c:	2b00      	cmp	r3, #0
 800168e:	d026      	beq.n	80016de <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001698:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016a0:	e01d      	b.n	80016de <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a33      	ldr	r2, [pc, #204]	; (8001780 <HAL_ADC_Start_IT+0x168>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d004      	beq.n	80016c2 <HAL_ADC_Start_IT+0xaa>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a2f      	ldr	r2, [pc, #188]	; (800177c <HAL_ADC_Start_IT+0x164>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d10d      	bne.n	80016de <HAL_ADC_Start_IT+0xc6>
 80016c2:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <HAL_ADC_Start_IT+0x168>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	f023 0206 	bic.w	r2, r3, #6
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80016f6:	e002      	b.n	80016fe <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f06f 0202 	mvn.w	r2, #2
 800170e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0220 	orr.w	r2, r2, #32
 800171e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800172a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800172e:	d113      	bne.n	8001758 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001734:	4a11      	ldr	r2, [pc, #68]	; (800177c <HAL_ADC_Start_IT+0x164>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d105      	bne.n	8001746 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_ADC_Start_IT+0x168>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001742:	2b00      	cmp	r3, #0
 8001744:	d108      	bne.n	8001758 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	e00c      	b.n	8001772 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	e003      	b.n	8001772 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001772:	7bfb      	ldrb	r3, [r7, #15]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40012800 	.word	0x40012800
 8001780:	40012400 	.word	0x40012400

08001784 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	f003 0320 	and.w	r3, r3, #32
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d03e      	beq.n	800183c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d039      	beq.n	800183c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	f003 0310 	and.w	r3, r3, #16
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d105      	bne.n	80017e0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017ea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017ee:	d11d      	bne.n	800182c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d119      	bne.n	800182c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0220 	bic.w	r2, r2, #32
 8001806:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d105      	bne.n	800182c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff fb81 	bl	8000f34 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f06f 0212 	mvn.w	r2, #18
 800183a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001842:	2b00      	cmp	r3, #0
 8001844:	d04d      	beq.n	80018e2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	d048      	beq.n	80018e2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d105      	bne.n	8001868 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001860:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001872:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001876:	d012      	beq.n	800189e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001882:	2b00      	cmp	r3, #0
 8001884:	d125      	bne.n	80018d2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001890:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001894:	d11d      	bne.n	80018d2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800189a:	2b00      	cmp	r3, #0
 800189c:	d119      	bne.n	80018d2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018ac:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d105      	bne.n	80018d2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ca:	f043 0201 	orr.w	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 fa6c 	bl	8001db0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f06f 020c 	mvn.w	r2, #12
 80018e0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d012      	beq.n	8001912 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00d      	beq.n	8001912 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f809 	bl	800191a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f06f 0201 	mvn.w	r2, #1
 8001910:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_ADC_ConfigChannel+0x20>
 8001948:	2302      	movs	r3, #2
 800194a:	e0dc      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x1da>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b06      	cmp	r3, #6
 800195a:	d81c      	bhi.n	8001996 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	3b05      	subs	r3, #5
 800196e:	221f      	movs	r2, #31
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	4019      	ands	r1, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	3b05      	subs	r3, #5
 8001988:	fa00 f203 	lsl.w	r2, r0, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	635a      	str	r2, [r3, #52]	; 0x34
 8001994:	e03c      	b.n	8001a10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b0c      	cmp	r3, #12
 800199c:	d81c      	bhi.n	80019d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	3b23      	subs	r3, #35	; 0x23
 80019b0:	221f      	movs	r2, #31
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	4019      	ands	r1, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	3b23      	subs	r3, #35	; 0x23
 80019ca:	fa00 f203 	lsl.w	r2, r0, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	631a      	str	r2, [r3, #48]	; 0x30
 80019d6:	e01b      	b.n	8001a10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	3b41      	subs	r3, #65	; 0x41
 80019ea:	221f      	movs	r2, #31
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	4019      	ands	r1, r3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	3b41      	subs	r3, #65	; 0x41
 8001a04:	fa00 f203 	lsl.w	r2, r0, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b09      	cmp	r3, #9
 8001a16:	d91c      	bls.n	8001a52 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68d9      	ldr	r1, [r3, #12]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4613      	mov	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	3b1e      	subs	r3, #30
 8001a2a:	2207      	movs	r2, #7
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	4019      	ands	r1, r3
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	6898      	ldr	r0, [r3, #8]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	3b1e      	subs	r3, #30
 8001a44:	fa00 f203 	lsl.w	r2, r0, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	60da      	str	r2, [r3, #12]
 8001a50:	e019      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6919      	ldr	r1, [r3, #16]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	2207      	movs	r2, #7
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	4019      	ands	r1, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	6898      	ldr	r0, [r3, #8]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4613      	mov	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b10      	cmp	r3, #16
 8001a8c:	d003      	beq.n	8001a96 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a92:	2b11      	cmp	r3, #17
 8001a94:	d132      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a1d      	ldr	r2, [pc, #116]	; (8001b10 <HAL_ADC_ConfigChannel+0x1e4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d125      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d126      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001abc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b10      	cmp	r3, #16
 8001ac4:	d11a      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ac6:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a13      	ldr	r2, [pc, #76]	; (8001b18 <HAL_ADC_ConfigChannel+0x1ec>)
 8001acc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad0:	0c9a      	lsrs	r2, r3, #18
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001adc:	e002      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f9      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x1b2>
 8001aea:	e007      	b.n	8001afc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	f043 0220 	orr.w	r2, r3, #32
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	40012400 	.word	0x40012400
 8001b14:	20000000 	.word	0x20000000
 8001b18:	431bde83 	.word	0x431bde83

08001b1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d040      	beq.n	8001bbc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0201 	orr.w	r2, r2, #1
 8001b48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b4a:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <ADC_Enable+0xac>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a1f      	ldr	r2, [pc, #124]	; (8001bcc <ADC_Enable+0xb0>)
 8001b50:	fba2 2303 	umull	r2, r3, r2, r3
 8001b54:	0c9b      	lsrs	r3, r3, #18
 8001b56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b58:	e002      	b.n	8001b60 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f9      	bne.n	8001b5a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b66:	f7ff fc75 	bl	8001454 <HAL_GetTick>
 8001b6a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b6c:	e01f      	b.n	8001bae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b6e:	f7ff fc71 	bl	8001454 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d918      	bls.n	8001bae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d011      	beq.n	8001bae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	f043 0210 	orr.w	r2, r3, #16
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	f043 0201 	orr.w	r2, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e007      	b.n	8001bbe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d1d8      	bne.n	8001b6e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	431bde83 	.word	0x431bde83

08001bd0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d12e      	bne.n	8001c48 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0201 	bic.w	r2, r2, #1
 8001bf8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bfa:	f7ff fc2b 	bl	8001454 <HAL_GetTick>
 8001bfe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c00:	e01b      	b.n	8001c3a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c02:	f7ff fc27 	bl	8001454 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d914      	bls.n	8001c3a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d10d      	bne.n	8001c3a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	f043 0210 	orr.w	r2, r3, #16
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2e:	f043 0201 	orr.w	r2, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e007      	b.n	8001c4a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d0dc      	beq.n	8001c02 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b087      	sub	sp, #28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <HAL_ADCEx_Calibration_Start+0x1e>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e097      	b.n	8001da2 <HAL_ADCEx_Calibration_Start+0x14e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ffa8 	bl	8001bd0 <ADC_ConversionStop_Disable>
 8001c80:	4603      	mov	r3, r0
 8001c82:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff49 	bl	8001b1c <ADC_Enable>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001c8e:	7dfb      	ldrb	r3, [r7, #23]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f040 8081 	bne.w	8001d98 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c9e:	f023 0302 	bic.w	r3, r3, #2
 8001ca2:	f043 0202 	orr.w	r2, r3, #2
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001caa:	4b40      	ldr	r3, [pc, #256]	; (8001dac <HAL_ADCEx_Calibration_Start+0x158>)
 8001cac:	681c      	ldr	r4, [r3, #0]
 8001cae:	2002      	movs	r0, #2
 8001cb0:	f001 f810 	bl	8002cd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001cba:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001cbc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001cbe:	e002      	b.n	8001cc6 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f9      	bne.n	8001cc0 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0208 	orr.w	r2, r2, #8
 8001cda:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001cdc:	f7ff fbba 	bl	8001454 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001ce2:	e01b      	b.n	8001d1c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001ce4:	f7ff fbb6 	bl	8001454 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b0a      	cmp	r3, #10
 8001cf0:	d914      	bls.n	8001d1c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00d      	beq.n	8001d1c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d04:	f023 0312 	bic.w	r3, r3, #18
 8001d08:	f043 0210 	orr.w	r2, r3, #16
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e042      	b.n	8001da2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1dc      	bne.n	8001ce4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f042 0204 	orr.w	r2, r2, #4
 8001d38:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001d3a:	f7ff fb8b 	bl	8001454 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001d40:	e01b      	b.n	8001d7a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001d42:	f7ff fb87 	bl	8001454 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b0a      	cmp	r3, #10
 8001d4e:	d914      	bls.n	8001d7a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00d      	beq.n	8001d7a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	f023 0312 	bic.w	r3, r3, #18
 8001d66:	f043 0210 	orr.w	r2, r3, #16
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e013      	b.n	8001da2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1dc      	bne.n	8001d42 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	f023 0303 	bic.w	r3, r3, #3
 8001d90:	f043 0201 	orr.w	r2, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	371c      	adds	r7, #28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd90      	pop	{r4, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000000 	.word	0x20000000

08001db0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
	...

08001dc4 <__NVIC_SetPriorityGrouping>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de0:	4013      	ands	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df6:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	60d3      	str	r3, [r2, #12]
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_GetPriorityGrouping>:
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <__NVIC_GetPriorityGrouping+0x18>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	f003 0307 	and.w	r3, r3, #7
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <__NVIC_EnableIRQ>:
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	db0b      	blt.n	8001e52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	f003 021f 	and.w	r2, r3, #31
 8001e40:	4906      	ldr	r1, [pc, #24]	; (8001e5c <__NVIC_EnableIRQ+0x34>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	2001      	movs	r0, #1
 8001e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	e000e100 	.word	0xe000e100

08001e60 <__NVIC_SetPriority>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	6039      	str	r1, [r7, #0]
 8001e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	db0a      	blt.n	8001e8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	490c      	ldr	r1, [pc, #48]	; (8001eac <__NVIC_SetPriority+0x4c>)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	0112      	lsls	r2, r2, #4
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	440b      	add	r3, r1
 8001e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e88:	e00a      	b.n	8001ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	4908      	ldr	r1, [pc, #32]	; (8001eb0 <__NVIC_SetPriority+0x50>)
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	3b04      	subs	r3, #4
 8001e98:	0112      	lsls	r2, r2, #4
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	761a      	strb	r2, [r3, #24]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000e100 	.word	0xe000e100
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <NVIC_EncodePriority>:
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	; 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f1c3 0307 	rsb	r3, r3, #7
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	bf28      	it	cs
 8001ed2:	2304      	movcs	r3, #4
 8001ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d902      	bls.n	8001ee4 <NVIC_EncodePriority+0x30>
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3b03      	subs	r3, #3
 8001ee2:	e000      	b.n	8001ee6 <NVIC_EncodePriority+0x32>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001efc:	f04f 31ff 	mov.w	r1, #4294967295
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	fa01 f303 	lsl.w	r3, r1, r3
 8001f06:	43d9      	mvns	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	4313      	orrs	r3, r2
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3724      	adds	r7, #36	; 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <SysTick_Config>:
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f28:	d301      	bcc.n	8001f2e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00f      	b.n	8001f4e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <SysTick_Config+0x40>)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f36:	210f      	movs	r1, #15
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	f7ff ff90 	bl	8001e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <SysTick_Config+0x40>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f46:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <SysTick_Config+0x40>)
 8001f48:	2207      	movs	r2, #7
 8001f4a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	e000e010 	.word	0xe000e010

08001f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ff2d 	bl	8001dc4 <__NVIC_SetPriorityGrouping>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4603      	mov	r3, r0
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f84:	f7ff ff42 	bl	8001e0c <__NVIC_GetPriorityGrouping>
 8001f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68b9      	ldr	r1, [r7, #8]
 8001f8e:	6978      	ldr	r0, [r7, #20]
 8001f90:	f7ff ff90 	bl	8001eb4 <NVIC_EncodePriority>
 8001f94:	4602      	mov	r2, r0
 8001f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff5f 	bl	8001e60 <__NVIC_SetPriority>
}
 8001fa2:	bf00      	nop
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff35 	bl	8001e28 <__NVIC_EnableIRQ>
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff ffa2 	bl	8001f18 <SysTick_Config>
 8001fd4:	4603      	mov	r3, r0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b08b      	sub	sp, #44	; 0x2c
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fea:	2300      	movs	r3, #0
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff2:	e169      	b.n	80022c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	69fa      	ldr	r2, [r7, #28]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	429a      	cmp	r2, r3
 800200e:	f040 8158 	bne.w	80022c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4a9a      	ldr	r2, [pc, #616]	; (8002280 <HAL_GPIO_Init+0x2a0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d05e      	beq.n	80020da <HAL_GPIO_Init+0xfa>
 800201c:	4a98      	ldr	r2, [pc, #608]	; (8002280 <HAL_GPIO_Init+0x2a0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d875      	bhi.n	800210e <HAL_GPIO_Init+0x12e>
 8002022:	4a98      	ldr	r2, [pc, #608]	; (8002284 <HAL_GPIO_Init+0x2a4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d058      	beq.n	80020da <HAL_GPIO_Init+0xfa>
 8002028:	4a96      	ldr	r2, [pc, #600]	; (8002284 <HAL_GPIO_Init+0x2a4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d86f      	bhi.n	800210e <HAL_GPIO_Init+0x12e>
 800202e:	4a96      	ldr	r2, [pc, #600]	; (8002288 <HAL_GPIO_Init+0x2a8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d052      	beq.n	80020da <HAL_GPIO_Init+0xfa>
 8002034:	4a94      	ldr	r2, [pc, #592]	; (8002288 <HAL_GPIO_Init+0x2a8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d869      	bhi.n	800210e <HAL_GPIO_Init+0x12e>
 800203a:	4a94      	ldr	r2, [pc, #592]	; (800228c <HAL_GPIO_Init+0x2ac>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d04c      	beq.n	80020da <HAL_GPIO_Init+0xfa>
 8002040:	4a92      	ldr	r2, [pc, #584]	; (800228c <HAL_GPIO_Init+0x2ac>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d863      	bhi.n	800210e <HAL_GPIO_Init+0x12e>
 8002046:	4a92      	ldr	r2, [pc, #584]	; (8002290 <HAL_GPIO_Init+0x2b0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d046      	beq.n	80020da <HAL_GPIO_Init+0xfa>
 800204c:	4a90      	ldr	r2, [pc, #576]	; (8002290 <HAL_GPIO_Init+0x2b0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d85d      	bhi.n	800210e <HAL_GPIO_Init+0x12e>
 8002052:	2b12      	cmp	r3, #18
 8002054:	d82a      	bhi.n	80020ac <HAL_GPIO_Init+0xcc>
 8002056:	2b12      	cmp	r3, #18
 8002058:	d859      	bhi.n	800210e <HAL_GPIO_Init+0x12e>
 800205a:	a201      	add	r2, pc, #4	; (adr r2, 8002060 <HAL_GPIO_Init+0x80>)
 800205c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002060:	080020db 	.word	0x080020db
 8002064:	080020b5 	.word	0x080020b5
 8002068:	080020c7 	.word	0x080020c7
 800206c:	08002109 	.word	0x08002109
 8002070:	0800210f 	.word	0x0800210f
 8002074:	0800210f 	.word	0x0800210f
 8002078:	0800210f 	.word	0x0800210f
 800207c:	0800210f 	.word	0x0800210f
 8002080:	0800210f 	.word	0x0800210f
 8002084:	0800210f 	.word	0x0800210f
 8002088:	0800210f 	.word	0x0800210f
 800208c:	0800210f 	.word	0x0800210f
 8002090:	0800210f 	.word	0x0800210f
 8002094:	0800210f 	.word	0x0800210f
 8002098:	0800210f 	.word	0x0800210f
 800209c:	0800210f 	.word	0x0800210f
 80020a0:	0800210f 	.word	0x0800210f
 80020a4:	080020bd 	.word	0x080020bd
 80020a8:	080020d1 	.word	0x080020d1
 80020ac:	4a79      	ldr	r2, [pc, #484]	; (8002294 <HAL_GPIO_Init+0x2b4>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d013      	beq.n	80020da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020b2:	e02c      	b.n	800210e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	623b      	str	r3, [r7, #32]
          break;
 80020ba:	e029      	b.n	8002110 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	3304      	adds	r3, #4
 80020c2:	623b      	str	r3, [r7, #32]
          break;
 80020c4:	e024      	b.n	8002110 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	3308      	adds	r3, #8
 80020cc:	623b      	str	r3, [r7, #32]
          break;
 80020ce:	e01f      	b.n	8002110 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	330c      	adds	r3, #12
 80020d6:	623b      	str	r3, [r7, #32]
          break;
 80020d8:	e01a      	b.n	8002110 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d102      	bne.n	80020e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020e2:	2304      	movs	r3, #4
 80020e4:	623b      	str	r3, [r7, #32]
          break;
 80020e6:	e013      	b.n	8002110 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d105      	bne.n	80020fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020f0:	2308      	movs	r3, #8
 80020f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69fa      	ldr	r2, [r7, #28]
 80020f8:	611a      	str	r2, [r3, #16]
          break;
 80020fa:	e009      	b.n	8002110 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020fc:	2308      	movs	r3, #8
 80020fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69fa      	ldr	r2, [r7, #28]
 8002104:	615a      	str	r2, [r3, #20]
          break;
 8002106:	e003      	b.n	8002110 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002108:	2300      	movs	r3, #0
 800210a:	623b      	str	r3, [r7, #32]
          break;
 800210c:	e000      	b.n	8002110 <HAL_GPIO_Init+0x130>
          break;
 800210e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	2bff      	cmp	r3, #255	; 0xff
 8002114:	d801      	bhi.n	800211a <HAL_GPIO_Init+0x13a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	e001      	b.n	800211e <HAL_GPIO_Init+0x13e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3304      	adds	r3, #4
 800211e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	2bff      	cmp	r3, #255	; 0xff
 8002124:	d802      	bhi.n	800212c <HAL_GPIO_Init+0x14c>
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	e002      	b.n	8002132 <HAL_GPIO_Init+0x152>
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	3b08      	subs	r3, #8
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	210f      	movs	r1, #15
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	401a      	ands	r2, r3
 8002144:	6a39      	ldr	r1, [r7, #32]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	fa01 f303 	lsl.w	r3, r1, r3
 800214c:	431a      	orrs	r2, r3
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 80b1 	beq.w	80022c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002160:	4b4d      	ldr	r3, [pc, #308]	; (8002298 <HAL_GPIO_Init+0x2b8>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4a4c      	ldr	r2, [pc, #304]	; (8002298 <HAL_GPIO_Init+0x2b8>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6193      	str	r3, [r2, #24]
 800216c:	4b4a      	ldr	r3, [pc, #296]	; (8002298 <HAL_GPIO_Init+0x2b8>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002178:	4a48      	ldr	r2, [pc, #288]	; (800229c <HAL_GPIO_Init+0x2bc>)
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	089b      	lsrs	r3, r3, #2
 800217e:	3302      	adds	r3, #2
 8002180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002184:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	220f      	movs	r2, #15
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4013      	ands	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a40      	ldr	r2, [pc, #256]	; (80022a0 <HAL_GPIO_Init+0x2c0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d013      	beq.n	80021cc <HAL_GPIO_Init+0x1ec>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a3f      	ldr	r2, [pc, #252]	; (80022a4 <HAL_GPIO_Init+0x2c4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d00d      	beq.n	80021c8 <HAL_GPIO_Init+0x1e8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a3e      	ldr	r2, [pc, #248]	; (80022a8 <HAL_GPIO_Init+0x2c8>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d007      	beq.n	80021c4 <HAL_GPIO_Init+0x1e4>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a3d      	ldr	r2, [pc, #244]	; (80022ac <HAL_GPIO_Init+0x2cc>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d101      	bne.n	80021c0 <HAL_GPIO_Init+0x1e0>
 80021bc:	2303      	movs	r3, #3
 80021be:	e006      	b.n	80021ce <HAL_GPIO_Init+0x1ee>
 80021c0:	2304      	movs	r3, #4
 80021c2:	e004      	b.n	80021ce <HAL_GPIO_Init+0x1ee>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e002      	b.n	80021ce <HAL_GPIO_Init+0x1ee>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <HAL_GPIO_Init+0x1ee>
 80021cc:	2300      	movs	r3, #0
 80021ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d0:	f002 0203 	and.w	r2, r2, #3
 80021d4:	0092      	lsls	r2, r2, #2
 80021d6:	4093      	lsls	r3, r2
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4313      	orrs	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021de:	492f      	ldr	r1, [pc, #188]	; (800229c <HAL_GPIO_Init+0x2bc>)
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	089b      	lsrs	r3, r3, #2
 80021e4:	3302      	adds	r3, #2
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d006      	beq.n	8002206 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021f8:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <HAL_GPIO_Init+0x2d0>)
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	492c      	ldr	r1, [pc, #176]	; (80022b0 <HAL_GPIO_Init+0x2d0>)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	608b      	str	r3, [r1, #8]
 8002204:	e006      	b.n	8002214 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_GPIO_Init+0x2d0>)
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	43db      	mvns	r3, r3
 800220e:	4928      	ldr	r1, [pc, #160]	; (80022b0 <HAL_GPIO_Init+0x2d0>)
 8002210:	4013      	ands	r3, r2
 8002212:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d006      	beq.n	800222e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002220:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <HAL_GPIO_Init+0x2d0>)
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	4922      	ldr	r1, [pc, #136]	; (80022b0 <HAL_GPIO_Init+0x2d0>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	60cb      	str	r3, [r1, #12]
 800222c:	e006      	b.n	800223c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <HAL_GPIO_Init+0x2d0>)
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	43db      	mvns	r3, r3
 8002236:	491e      	ldr	r1, [pc, #120]	; (80022b0 <HAL_GPIO_Init+0x2d0>)
 8002238:	4013      	ands	r3, r2
 800223a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d006      	beq.n	8002256 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_GPIO_Init+0x2d0>)
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	4918      	ldr	r1, [pc, #96]	; (80022b0 <HAL_GPIO_Init+0x2d0>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
 8002254:	e006      	b.n	8002264 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002256:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <HAL_GPIO_Init+0x2d0>)
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	43db      	mvns	r3, r3
 800225e:	4914      	ldr	r1, [pc, #80]	; (80022b0 <HAL_GPIO_Init+0x2d0>)
 8002260:	4013      	ands	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d021      	beq.n	80022b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <HAL_GPIO_Init+0x2d0>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	490e      	ldr	r1, [pc, #56]	; (80022b0 <HAL_GPIO_Init+0x2d0>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	600b      	str	r3, [r1, #0]
 800227c:	e021      	b.n	80022c2 <HAL_GPIO_Init+0x2e2>
 800227e:	bf00      	nop
 8002280:	10320000 	.word	0x10320000
 8002284:	10310000 	.word	0x10310000
 8002288:	10220000 	.word	0x10220000
 800228c:	10210000 	.word	0x10210000
 8002290:	10120000 	.word	0x10120000
 8002294:	10110000 	.word	0x10110000
 8002298:	40021000 	.word	0x40021000
 800229c:	40010000 	.word	0x40010000
 80022a0:	40010800 	.word	0x40010800
 80022a4:	40010c00 	.word	0x40010c00
 80022a8:	40011000 	.word	0x40011000
 80022ac:	40011400 	.word	0x40011400
 80022b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_GPIO_Init+0x304>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	4909      	ldr	r1, [pc, #36]	; (80022e4 <HAL_GPIO_Init+0x304>)
 80022be:	4013      	ands	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	3301      	adds	r3, #1
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	fa22 f303 	lsr.w	r3, r2, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f47f ae8e 	bne.w	8001ff4 <HAL_GPIO_Init+0x14>
  }
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	372c      	adds	r7, #44	; 0x2c
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	40010400 	.word	0x40010400

080022e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	807b      	strh	r3, [r7, #2]
 80022f4:	4613      	mov	r3, r2
 80022f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022f8:	787b      	ldrb	r3, [r7, #1]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022fe:	887a      	ldrh	r2, [r7, #2]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002304:	e003      	b.n	800230e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002306:	887b      	ldrh	r3, [r7, #2]
 8002308:	041a      	lsls	r2, r3, #16
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	611a      	str	r2, [r3, #16]
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	4013      	ands	r3, r2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d006      	beq.n	800233c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800232e:	4a05      	ldr	r2, [pc, #20]	; (8002344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002330:	88fb      	ldrh	r3, [r7, #6]
 8002332:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe fdec 	bl	8000f14 <HAL_GPIO_EXTI_Callback>
  }
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40010400 	.word	0x40010400

08002348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e272      	b.n	8002840 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 8087 	beq.w	8002476 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002368:	4b92      	ldr	r3, [pc, #584]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b04      	cmp	r3, #4
 8002372:	d00c      	beq.n	800238e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002374:	4b8f      	ldr	r3, [pc, #572]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 030c 	and.w	r3, r3, #12
 800237c:	2b08      	cmp	r3, #8
 800237e:	d112      	bne.n	80023a6 <HAL_RCC_OscConfig+0x5e>
 8002380:	4b8c      	ldr	r3, [pc, #560]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238c:	d10b      	bne.n	80023a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238e:	4b89      	ldr	r3, [pc, #548]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d06c      	beq.n	8002474 <HAL_RCC_OscConfig+0x12c>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d168      	bne.n	8002474 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e24c      	b.n	8002840 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ae:	d106      	bne.n	80023be <HAL_RCC_OscConfig+0x76>
 80023b0:	4b80      	ldr	r3, [pc, #512]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a7f      	ldr	r2, [pc, #508]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80023b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	e02e      	b.n	800241c <HAL_RCC_OscConfig+0xd4>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x98>
 80023c6:	4b7b      	ldr	r3, [pc, #492]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a7a      	ldr	r2, [pc, #488]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b78      	ldr	r3, [pc, #480]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a77      	ldr	r2, [pc, #476]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	e01d      	b.n	800241c <HAL_RCC_OscConfig+0xd4>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0xbc>
 80023ea:	4b72      	ldr	r3, [pc, #456]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a71      	ldr	r2, [pc, #452]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	4b6f      	ldr	r3, [pc, #444]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a6e      	ldr	r2, [pc, #440]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e00b      	b.n	800241c <HAL_RCC_OscConfig+0xd4>
 8002404:	4b6b      	ldr	r3, [pc, #428]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a6a      	ldr	r2, [pc, #424]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 800240a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	4b68      	ldr	r3, [pc, #416]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a67      	ldr	r2, [pc, #412]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d013      	beq.n	800244c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7ff f816 	bl	8001454 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800242c:	f7ff f812 	bl	8001454 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e200      	b.n	8002840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	4b5d      	ldr	r3, [pc, #372]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0xe4>
 800244a:	e014      	b.n	8002476 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244c:	f7ff f802 	bl	8001454 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002454:	f7fe fffe 	bl	8001454 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b64      	cmp	r3, #100	; 0x64
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e1ec      	b.n	8002840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002466:	4b53      	ldr	r3, [pc, #332]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x10c>
 8002472:	e000      	b.n	8002476 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d063      	beq.n	800254a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002482:	4b4c      	ldr	r3, [pc, #304]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00b      	beq.n	80024a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800248e:	4b49      	ldr	r3, [pc, #292]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b08      	cmp	r3, #8
 8002498:	d11c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x18c>
 800249a:	4b46      	ldr	r3, [pc, #280]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d116      	bne.n	80024d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a6:	4b43      	ldr	r3, [pc, #268]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_RCC_OscConfig+0x176>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d001      	beq.n	80024be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e1c0      	b.n	8002840 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024be:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4939      	ldr	r1, [pc, #228]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d2:	e03a      	b.n	800254a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d020      	beq.n	800251e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024dc:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 80024de:	2201      	movs	r2, #1
 80024e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e2:	f7fe ffb7 	bl	8001454 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ea:	f7fe ffb3 	bl	8001454 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e1a1      	b.n	8002840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fc:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002508:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4927      	ldr	r1, [pc, #156]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002518:	4313      	orrs	r3, r2
 800251a:	600b      	str	r3, [r1, #0]
 800251c:	e015      	b.n	800254a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800251e:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7fe ff96 	bl	8001454 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252c:	f7fe ff92 	bl	8001454 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e180      	b.n	8002840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253e:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d03a      	beq.n	80025cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d019      	beq.n	8002592 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800255e:	4b17      	ldr	r3, [pc, #92]	; (80025bc <HAL_RCC_OscConfig+0x274>)
 8002560:	2201      	movs	r2, #1
 8002562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002564:	f7fe ff76 	bl	8001454 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800256c:	f7fe ff72 	bl	8001454 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e160      	b.n	8002840 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257e:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800258a:	2001      	movs	r0, #1
 800258c:	f000 face 	bl	8002b2c <RCC_Delay>
 8002590:	e01c      	b.n	80025cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002592:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <HAL_RCC_OscConfig+0x274>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002598:	f7fe ff5c 	bl	8001454 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800259e:	e00f      	b.n	80025c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a0:	f7fe ff58 	bl	8001454 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d908      	bls.n	80025c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e146      	b.n	8002840 <HAL_RCC_OscConfig+0x4f8>
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	42420000 	.word	0x42420000
 80025bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c0:	4b92      	ldr	r3, [pc, #584]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1e9      	bne.n	80025a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80a6 	beq.w	8002726 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025da:	2300      	movs	r3, #0
 80025dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025de:	4b8b      	ldr	r3, [pc, #556]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10d      	bne.n	8002606 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ea:	4b88      	ldr	r3, [pc, #544]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	4a87      	ldr	r2, [pc, #540]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f4:	61d3      	str	r3, [r2, #28]
 80025f6:	4b85      	ldr	r3, [pc, #532]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002602:	2301      	movs	r3, #1
 8002604:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b82      	ldr	r3, [pc, #520]	; (8002810 <HAL_RCC_OscConfig+0x4c8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d118      	bne.n	8002644 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002612:	4b7f      	ldr	r3, [pc, #508]	; (8002810 <HAL_RCC_OscConfig+0x4c8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a7e      	ldr	r2, [pc, #504]	; (8002810 <HAL_RCC_OscConfig+0x4c8>)
 8002618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800261e:	f7fe ff19 	bl	8001454 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002626:	f7fe ff15 	bl	8001454 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b64      	cmp	r3, #100	; 0x64
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e103      	b.n	8002840 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	4b75      	ldr	r3, [pc, #468]	; (8002810 <HAL_RCC_OscConfig+0x4c8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d106      	bne.n	800265a <HAL_RCC_OscConfig+0x312>
 800264c:	4b6f      	ldr	r3, [pc, #444]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4a6e      	ldr	r2, [pc, #440]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6213      	str	r3, [r2, #32]
 8002658:	e02d      	b.n	80026b6 <HAL_RCC_OscConfig+0x36e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0x334>
 8002662:	4b6a      	ldr	r3, [pc, #424]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4a69      	ldr	r2, [pc, #420]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 8002668:	f023 0301 	bic.w	r3, r3, #1
 800266c:	6213      	str	r3, [r2, #32]
 800266e:	4b67      	ldr	r3, [pc, #412]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	4a66      	ldr	r2, [pc, #408]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 8002674:	f023 0304 	bic.w	r3, r3, #4
 8002678:	6213      	str	r3, [r2, #32]
 800267a:	e01c      	b.n	80026b6 <HAL_RCC_OscConfig+0x36e>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	2b05      	cmp	r3, #5
 8002682:	d10c      	bne.n	800269e <HAL_RCC_OscConfig+0x356>
 8002684:	4b61      	ldr	r3, [pc, #388]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4a60      	ldr	r2, [pc, #384]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	6213      	str	r3, [r2, #32]
 8002690:	4b5e      	ldr	r3, [pc, #376]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4a5d      	ldr	r2, [pc, #372]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6213      	str	r3, [r2, #32]
 800269c:	e00b      	b.n	80026b6 <HAL_RCC_OscConfig+0x36e>
 800269e:	4b5b      	ldr	r3, [pc, #364]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	4a5a      	ldr	r2, [pc, #360]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	f023 0301 	bic.w	r3, r3, #1
 80026a8:	6213      	str	r3, [r2, #32]
 80026aa:	4b58      	ldr	r3, [pc, #352]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4a57      	ldr	r2, [pc, #348]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	f023 0304 	bic.w	r3, r3, #4
 80026b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d015      	beq.n	80026ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026be:	f7fe fec9 	bl	8001454 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c4:	e00a      	b.n	80026dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7fe fec5 	bl	8001454 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e0b1      	b.n	8002840 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026dc:	4b4b      	ldr	r3, [pc, #300]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ee      	beq.n	80026c6 <HAL_RCC_OscConfig+0x37e>
 80026e8:	e014      	b.n	8002714 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ea:	f7fe feb3 	bl	8001454 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f0:	e00a      	b.n	8002708 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f2:	f7fe feaf 	bl	8001454 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e09b      	b.n	8002840 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002708:	4b40      	ldr	r3, [pc, #256]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1ee      	bne.n	80026f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002714:	7dfb      	ldrb	r3, [r7, #23]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d105      	bne.n	8002726 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271a:	4b3c      	ldr	r3, [pc, #240]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4a3b      	ldr	r2, [pc, #236]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 8002720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002724:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8087 	beq.w	800283e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002730:	4b36      	ldr	r3, [pc, #216]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 030c 	and.w	r3, r3, #12
 8002738:	2b08      	cmp	r3, #8
 800273a:	d061      	beq.n	8002800 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d146      	bne.n	80027d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002744:	4b33      	ldr	r3, [pc, #204]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fe83 	bl	8001454 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fe7f 	bl	8001454 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e06d      	b.n	8002840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002764:	4b29      	ldr	r3, [pc, #164]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f0      	bne.n	8002752 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002778:	d108      	bne.n	800278c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800277a:	4b24      	ldr	r3, [pc, #144]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	4921      	ldr	r1, [pc, #132]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800278c:	4b1f      	ldr	r3, [pc, #124]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a19      	ldr	r1, [r3, #32]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	430b      	orrs	r3, r1
 800279e:	491b      	ldr	r1, [pc, #108]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a4:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7fe fe53 	bl	8001454 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b2:	f7fe fe4f 	bl	8001454 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e03d      	b.n	8002840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x46a>
 80027d0:	e035      	b.n	800283e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <HAL_RCC_OscConfig+0x4cc>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7fe fe3c 	bl	8001454 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fe fe38 	bl	8001454 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e026      	b.n	8002840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x498>
 80027fe:	e01e      	b.n	800283e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d107      	bne.n	8002818 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e019      	b.n	8002840 <HAL_RCC_OscConfig+0x4f8>
 800280c:	40021000 	.word	0x40021000
 8002810:	40007000 	.word	0x40007000
 8002814:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_RCC_OscConfig+0x500>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	429a      	cmp	r2, r3
 800282a:	d106      	bne.n	800283a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002836:	429a      	cmp	r2, r3
 8002838:	d001      	beq.n	800283e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0d0      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002860:	4b6a      	ldr	r3, [pc, #424]	; (8002a0c <HAL_RCC_ClockConfig+0x1c0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d910      	bls.n	8002890 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286e:	4b67      	ldr	r3, [pc, #412]	; (8002a0c <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 0207 	bic.w	r2, r3, #7
 8002876:	4965      	ldr	r1, [pc, #404]	; (8002a0c <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	4313      	orrs	r3, r2
 800287c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b63      	ldr	r3, [pc, #396]	; (8002a0c <HAL_RCC_ClockConfig+0x1c0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0b8      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d020      	beq.n	80028de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a8:	4b59      	ldr	r3, [pc, #356]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	4a58      	ldr	r2, [pc, #352]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c0:	4b53      	ldr	r3, [pc, #332]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	4a52      	ldr	r2, [pc, #328]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028cc:	4b50      	ldr	r3, [pc, #320]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	494d      	ldr	r1, [pc, #308]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d040      	beq.n	800296c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d107      	bne.n	8002902 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	4b47      	ldr	r3, [pc, #284]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d115      	bne.n	800292a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e07f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d107      	bne.n	800291a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290a:	4b41      	ldr	r3, [pc, #260]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d109      	bne.n	800292a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e073      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291a:	4b3d      	ldr	r3, [pc, #244]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e06b      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800292a:	4b39      	ldr	r3, [pc, #228]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f023 0203 	bic.w	r2, r3, #3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	4936      	ldr	r1, [pc, #216]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800293c:	f7fe fd8a 	bl	8001454 <HAL_GetTick>
 8002940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002942:	e00a      	b.n	800295a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002944:	f7fe fd86 	bl	8001454 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e053      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295a:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 020c 	and.w	r2, r3, #12
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	429a      	cmp	r2, r3
 800296a:	d1eb      	bne.n	8002944 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800296c:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <HAL_RCC_ClockConfig+0x1c0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d210      	bcs.n	800299c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b24      	ldr	r3, [pc, #144]	; (8002a0c <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 0207 	bic.w	r2, r3, #7
 8002982:	4922      	ldr	r1, [pc, #136]	; (8002a0c <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_RCC_ClockConfig+0x1c0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e032      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a8:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4916      	ldr	r1, [pc, #88]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029c6:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	490e      	ldr	r1, [pc, #56]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029da:	f000 f821 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 80029de:	4602      	mov	r2, r0
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	490a      	ldr	r1, [pc, #40]	; (8002a14 <HAL_RCC_ClockConfig+0x1c8>)
 80029ec:	5ccb      	ldrb	r3, [r1, r3]
 80029ee:	fa22 f303 	lsr.w	r3, r2, r3
 80029f2:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <HAL_RCC_ClockConfig+0x1cc>)
 80029f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_RCC_ClockConfig+0x1d0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fce8 	bl	80013d0 <HAL_InitTick>

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40022000 	.word	0x40022000
 8002a10:	40021000 	.word	0x40021000
 8002a14:	08004704 	.word	0x08004704
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	20000004 	.word	0x20000004

08002a20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	2300      	movs	r3, #0
 8002a34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d002      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x30>
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d003      	beq.n	8002a56 <HAL_RCC_GetSysClockFreq+0x36>
 8002a4e:	e027      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a52:	613b      	str	r3, [r7, #16]
      break;
 8002a54:	e027      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	0c9b      	lsrs	r3, r3, #18
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	4a17      	ldr	r2, [pc, #92]	; (8002abc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a60:	5cd3      	ldrb	r3, [r2, r3]
 8002a62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d010      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a6e:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	0c5b      	lsrs	r3, r3, #17
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	4a11      	ldr	r2, [pc, #68]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a7a:	5cd3      	ldrb	r3, [r2, r3]
 8002a7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a82:	fb03 f202 	mul.w	r2, r3, r2
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	e004      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a0c      	ldr	r2, [pc, #48]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a94:	fb02 f303 	mul.w	r3, r2, r3
 8002a98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	613b      	str	r3, [r7, #16]
      break;
 8002a9e:	e002      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aa2:	613b      	str	r3, [r7, #16]
      break;
 8002aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aa6:	693b      	ldr	r3, [r7, #16]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	007a1200 	.word	0x007a1200
 8002abc:	0800471c 	.word	0x0800471c
 8002ac0:	0800472c 	.word	0x0800472c
 8002ac4:	003d0900 	.word	0x003d0900

08002ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002acc:	4b02      	ldr	r3, [pc, #8]	; (8002ad8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ace:	681b      	ldr	r3, [r3, #0]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	20000000 	.word	0x20000000

08002adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ae0:	f7ff fff2 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	0a1b      	lsrs	r3, r3, #8
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	4903      	ldr	r1, [pc, #12]	; (8002b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002af2:	5ccb      	ldrb	r3, [r1, r3]
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40021000 	.word	0x40021000
 8002b00:	08004714 	.word	0x08004714

08002b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b08:	f7ff ffde 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	0adb      	lsrs	r3, r3, #11
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	4903      	ldr	r1, [pc, #12]	; (8002b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40021000 	.word	0x40021000
 8002b28:	08004714 	.word	0x08004714

08002b2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b34:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <RCC_Delay+0x34>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <RCC_Delay+0x38>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	0a5b      	lsrs	r3, r3, #9
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	fb02 f303 	mul.w	r3, r2, r3
 8002b46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b48:	bf00      	nop
  }
  while (Delay --);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1e5a      	subs	r2, r3, #1
 8002b4e:	60fa      	str	r2, [r7, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f9      	bne.n	8002b48 <RCC_Delay+0x1c>
}
 8002b54:	bf00      	nop
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	20000000 	.word	0x20000000
 8002b64:	10624dd3 	.word	0x10624dd3

08002b68 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d07d      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b84:	2300      	movs	r3, #0
 8002b86:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b88:	4b4f      	ldr	r3, [pc, #316]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10d      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b94:	4b4c      	ldr	r3, [pc, #304]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	4a4b      	ldr	r2, [pc, #300]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	61d3      	str	r3, [r2, #28]
 8002ba0:	4b49      	ldr	r3, [pc, #292]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bac:	2301      	movs	r3, #1
 8002bae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb0:	4b46      	ldr	r3, [pc, #280]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d118      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bbc:	4b43      	ldr	r3, [pc, #268]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a42      	ldr	r2, [pc, #264]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc8:	f7fe fc44 	bl	8001454 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bce:	e008      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd0:	f7fe fc40 	bl	8001454 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	; 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e06d      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be2:	4b3a      	ldr	r3, [pc, #232]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bee:	4b36      	ldr	r3, [pc, #216]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d02e      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d027      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c0c:	4b2e      	ldr	r3, [pc, #184]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c14:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c16:	4b2e      	ldr	r3, [pc, #184]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c1c:	4b2c      	ldr	r3, [pc, #176]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c22:	4a29      	ldr	r2, [pc, #164]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d014      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c32:	f7fe fc0f 	bl	8001454 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c38:	e00a      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3a:	f7fe fc0b 	bl	8001454 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e036      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c50:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0ee      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c5c:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4917      	ldr	r1, [pc, #92]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c6e:	7dfb      	ldrb	r3, [r7, #23]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d105      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c74:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c8c:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	490b      	ldr	r1, [pc, #44]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0310 	and.w	r3, r3, #16
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d008      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	4904      	ldr	r1, [pc, #16]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40007000 	.word	0x40007000
 8002cd0:	42420440 	.word	0x42420440

08002cd4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	2300      	movs	r3, #0
 8002cee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b10      	cmp	r3, #16
 8002cf4:	d00a      	beq.n	8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b10      	cmp	r3, #16
 8002cfa:	f200 808a 	bhi.w	8002e12 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d045      	beq.n	8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d075      	beq.n	8002df6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002d0a:	e082      	b.n	8002e12 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002d0c:	4b46      	ldr	r3, [pc, #280]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002d12:	4b45      	ldr	r3, [pc, #276]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d07b      	beq.n	8002e16 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	0c9b      	lsrs	r3, r3, #18
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	4a41      	ldr	r2, [pc, #260]	; (8002e2c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002d28:	5cd3      	ldrb	r3, [r2, r3]
 8002d2a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d015      	beq.n	8002d62 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d36:	4b3c      	ldr	r3, [pc, #240]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	0c5b      	lsrs	r3, r3, #17
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	4a3b      	ldr	r2, [pc, #236]	; (8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002d42:	5cd3      	ldrb	r3, [r2, r3]
 8002d44:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00d      	beq.n	8002d6c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002d50:	4a38      	ldr	r2, [pc, #224]	; (8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	fb02 f303 	mul.w	r3, r2, r3
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	e004      	b.n	8002d6c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4a34      	ldr	r2, [pc, #208]	; (8002e38 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002d66:	fb02 f303 	mul.w	r3, r2, r3
 8002d6a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002d6c:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d78:	d102      	bne.n	8002d80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	61bb      	str	r3, [r7, #24]
      break;
 8002d7e:	e04a      	b.n	8002e16 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4a2d      	ldr	r2, [pc, #180]	; (8002e3c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	085b      	lsrs	r3, r3, #1
 8002d8c:	61bb      	str	r3, [r7, #24]
      break;
 8002d8e:	e042      	b.n	8002e16 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002d90:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da0:	d108      	bne.n	8002db4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002dac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	e01f      	b.n	8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dbe:	d109      	bne.n	8002dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002dcc:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	e00f      	b.n	8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dde:	d11c      	bne.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002de0:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d016      	beq.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002dec:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002df0:	61bb      	str	r3, [r7, #24]
      break;
 8002df2:	e012      	b.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002df4:	e011      	b.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002df6:	f7ff fe85 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	0b9b      	lsrs	r3, r3, #14
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	3301      	adds	r3, #1
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0e:	61bb      	str	r3, [r7, #24]
      break;
 8002e10:	e004      	b.n	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e12:	bf00      	nop
 8002e14:	e002      	b.n	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e16:	bf00      	nop
 8002e18:	e000      	b.n	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e1a:	bf00      	nop
    }
  }
  return (frequency);
 8002e1c:	69bb      	ldr	r3, [r7, #24]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3720      	adds	r7, #32
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	08004730 	.word	0x08004730
 8002e30:	08004740 	.word	0x08004740
 8002e34:	007a1200 	.word	0x007a1200
 8002e38:	003d0900 	.word	0x003d0900
 8002e3c:	aaaaaaab 	.word	0xaaaaaaab

08002e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e041      	b.n	8002ed6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fe f914 	bl	8001094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f000 faa8 	bl	80033d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d001      	beq.n	8002ef8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e032      	b.n	8002f5e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a18      	ldr	r2, [pc, #96]	; (8002f68 <HAL_TIM_Base_Start+0x88>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00e      	beq.n	8002f28 <HAL_TIM_Base_Start+0x48>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f12:	d009      	beq.n	8002f28 <HAL_TIM_Base_Start+0x48>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a14      	ldr	r2, [pc, #80]	; (8002f6c <HAL_TIM_Base_Start+0x8c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d004      	beq.n	8002f28 <HAL_TIM_Base_Start+0x48>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a13      	ldr	r2, [pc, #76]	; (8002f70 <HAL_TIM_Base_Start+0x90>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d111      	bne.n	8002f4c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	d010      	beq.n	8002f5c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0201 	orr.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f4a:	e007      	b.n	8002f5c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	40012c00 	.word	0x40012c00
 8002f6c:	40000400 	.word	0x40000400
 8002f70:	40000800 	.word	0x40000800

08002f74 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6a1a      	ldr	r2, [r3, #32]
 8002f82:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10f      	bne.n	8002fac <HAL_TIM_Base_Stop+0x38>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6a1a      	ldr	r2, [r3, #32]
 8002f92:	f240 4344 	movw	r3, #1092	; 0x444
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d107      	bne.n	8002fac <HAL_TIM_Base_Stop+0x38>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d122      	bne.n	800301c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d11b      	bne.n	800301c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0202 	mvn.w	r2, #2
 8002fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f9bd 	bl	8003382 <HAL_TIM_IC_CaptureCallback>
 8003008:	e005      	b.n	8003016 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f9b0 	bl	8003370 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f9bf 	bl	8003394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b04      	cmp	r3, #4
 8003028:	d122      	bne.n	8003070 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b04      	cmp	r3, #4
 8003036:	d11b      	bne.n	8003070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0204 	mvn.w	r2, #4
 8003040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2202      	movs	r2, #2
 8003046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f993 	bl	8003382 <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f986 	bl	8003370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f995 	bl	8003394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b08      	cmp	r3, #8
 800307c:	d122      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b08      	cmp	r3, #8
 800308a:	d11b      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0208 	mvn.w	r2, #8
 8003094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2204      	movs	r2, #4
 800309a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f969 	bl	8003382 <HAL_TIM_IC_CaptureCallback>
 80030b0:	e005      	b.n	80030be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f95c 	bl	8003370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f96b 	bl	8003394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	2b10      	cmp	r3, #16
 80030d0:	d122      	bne.n	8003118 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d11b      	bne.n	8003118 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0210 	mvn.w	r2, #16
 80030e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2208      	movs	r2, #8
 80030ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f93f 	bl	8003382 <HAL_TIM_IC_CaptureCallback>
 8003104:	e005      	b.n	8003112 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f932 	bl	8003370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f941 	bl	8003394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b01      	cmp	r3, #1
 8003124:	d10e      	bne.n	8003144 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b01      	cmp	r3, #1
 8003132:	d107      	bne.n	8003144 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0201 	mvn.w	r2, #1
 800313c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f90d 	bl	800335e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314e:	2b80      	cmp	r3, #128	; 0x80
 8003150:	d10e      	bne.n	8003170 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315c:	2b80      	cmp	r3, #128	; 0x80
 800315e:	d107      	bne.n	8003170 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fa91 	bl	8003692 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317a:	2b40      	cmp	r3, #64	; 0x40
 800317c:	d10e      	bne.n	800319c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003188:	2b40      	cmp	r3, #64	; 0x40
 800318a:	d107      	bne.n	800319c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f905 	bl	80033a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	d10e      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d107      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0220 	mvn.w	r2, #32
 80031c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fa5c 	bl	8003680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_TIM_ConfigClockSource+0x1c>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e0b4      	b.n	8003356 <HAL_TIM_ConfigClockSource+0x186>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800320a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003212:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003224:	d03e      	beq.n	80032a4 <HAL_TIM_ConfigClockSource+0xd4>
 8003226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800322a:	f200 8087 	bhi.w	800333c <HAL_TIM_ConfigClockSource+0x16c>
 800322e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003232:	f000 8086 	beq.w	8003342 <HAL_TIM_ConfigClockSource+0x172>
 8003236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323a:	d87f      	bhi.n	800333c <HAL_TIM_ConfigClockSource+0x16c>
 800323c:	2b70      	cmp	r3, #112	; 0x70
 800323e:	d01a      	beq.n	8003276 <HAL_TIM_ConfigClockSource+0xa6>
 8003240:	2b70      	cmp	r3, #112	; 0x70
 8003242:	d87b      	bhi.n	800333c <HAL_TIM_ConfigClockSource+0x16c>
 8003244:	2b60      	cmp	r3, #96	; 0x60
 8003246:	d050      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x11a>
 8003248:	2b60      	cmp	r3, #96	; 0x60
 800324a:	d877      	bhi.n	800333c <HAL_TIM_ConfigClockSource+0x16c>
 800324c:	2b50      	cmp	r3, #80	; 0x50
 800324e:	d03c      	beq.n	80032ca <HAL_TIM_ConfigClockSource+0xfa>
 8003250:	2b50      	cmp	r3, #80	; 0x50
 8003252:	d873      	bhi.n	800333c <HAL_TIM_ConfigClockSource+0x16c>
 8003254:	2b40      	cmp	r3, #64	; 0x40
 8003256:	d058      	beq.n	800330a <HAL_TIM_ConfigClockSource+0x13a>
 8003258:	2b40      	cmp	r3, #64	; 0x40
 800325a:	d86f      	bhi.n	800333c <HAL_TIM_ConfigClockSource+0x16c>
 800325c:	2b30      	cmp	r3, #48	; 0x30
 800325e:	d064      	beq.n	800332a <HAL_TIM_ConfigClockSource+0x15a>
 8003260:	2b30      	cmp	r3, #48	; 0x30
 8003262:	d86b      	bhi.n	800333c <HAL_TIM_ConfigClockSource+0x16c>
 8003264:	2b20      	cmp	r3, #32
 8003266:	d060      	beq.n	800332a <HAL_TIM_ConfigClockSource+0x15a>
 8003268:	2b20      	cmp	r3, #32
 800326a:	d867      	bhi.n	800333c <HAL_TIM_ConfigClockSource+0x16c>
 800326c:	2b00      	cmp	r3, #0
 800326e:	d05c      	beq.n	800332a <HAL_TIM_ConfigClockSource+0x15a>
 8003270:	2b10      	cmp	r3, #16
 8003272:	d05a      	beq.n	800332a <HAL_TIM_ConfigClockSource+0x15a>
 8003274:	e062      	b.n	800333c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003286:	f000 f97e 	bl	8003586 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003298:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	609a      	str	r2, [r3, #8]
      break;
 80032a2:	e04f      	b.n	8003344 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032b4:	f000 f967 	bl	8003586 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032c6:	609a      	str	r2, [r3, #8]
      break;
 80032c8:	e03c      	b.n	8003344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d6:	461a      	mov	r2, r3
 80032d8:	f000 f8de 	bl	8003498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2150      	movs	r1, #80	; 0x50
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 f935 	bl	8003552 <TIM_ITRx_SetConfig>
      break;
 80032e8:	e02c      	b.n	8003344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032f6:	461a      	mov	r2, r3
 80032f8:	f000 f8fc 	bl	80034f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2160      	movs	r1, #96	; 0x60
 8003302:	4618      	mov	r0, r3
 8003304:	f000 f925 	bl	8003552 <TIM_ITRx_SetConfig>
      break;
 8003308:	e01c      	b.n	8003344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003316:	461a      	mov	r2, r3
 8003318:	f000 f8be 	bl	8003498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2140      	movs	r1, #64	; 0x40
 8003322:	4618      	mov	r0, r3
 8003324:	f000 f915 	bl	8003552 <TIM_ITRx_SetConfig>
      break;
 8003328:	e00c      	b.n	8003344 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4619      	mov	r1, r3
 8003334:	4610      	mov	r0, r2
 8003336:	f000 f90c 	bl	8003552 <TIM_ITRx_SetConfig>
      break;
 800333a:	e003      	b.n	8003344 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
      break;
 8003340:	e000      	b.n	8003344 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003342:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003354:	7bfb      	ldrb	r3, [r7, #15]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr

08003382 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr

080033a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(const TIM_HandleTypeDef *htim)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  return htim->State;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c6:	b2db      	uxtb	r3, r3
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr
	...

080033d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a29      	ldr	r2, [pc, #164]	; (800348c <TIM_Base_SetConfig+0xb8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d00b      	beq.n	8003404 <TIM_Base_SetConfig+0x30>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f2:	d007      	beq.n	8003404 <TIM_Base_SetConfig+0x30>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a26      	ldr	r2, [pc, #152]	; (8003490 <TIM_Base_SetConfig+0xbc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d003      	beq.n	8003404 <TIM_Base_SetConfig+0x30>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a25      	ldr	r2, [pc, #148]	; (8003494 <TIM_Base_SetConfig+0xc0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d108      	bne.n	8003416 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1c      	ldr	r2, [pc, #112]	; (800348c <TIM_Base_SetConfig+0xb8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00b      	beq.n	8003436 <TIM_Base_SetConfig+0x62>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003424:	d007      	beq.n	8003436 <TIM_Base_SetConfig+0x62>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a19      	ldr	r2, [pc, #100]	; (8003490 <TIM_Base_SetConfig+0xbc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d003      	beq.n	8003436 <TIM_Base_SetConfig+0x62>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a18      	ldr	r2, [pc, #96]	; (8003494 <TIM_Base_SetConfig+0xc0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d108      	bne.n	8003448 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a07      	ldr	r2, [pc, #28]	; (800348c <TIM_Base_SetConfig+0xb8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d103      	bne.n	800347c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	615a      	str	r2, [r3, #20]
}
 8003482:	bf00      	nop
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr
 800348c:	40012c00 	.word	0x40012c00
 8003490:	40000400 	.word	0x40000400
 8003494:	40000800 	.word	0x40000800

08003498 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	f023 0201 	bic.w	r2, r3, #1
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f023 030a 	bic.w	r3, r3, #10
 80034d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	621a      	str	r2, [r3, #32]
}
 80034ea:	bf00      	nop
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	f023 0210 	bic.w	r2, r3, #16
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800351e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	031b      	lsls	r3, r3, #12
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003530:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	621a      	str	r2, [r3, #32]
}
 8003548:	bf00      	nop
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr

08003552 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003552:	b480      	push	{r7}
 8003554:	b085      	sub	sp, #20
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003568:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	f043 0307 	orr.w	r3, r3, #7
 8003574:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	609a      	str	r2, [r3, #8]
}
 800357c:	bf00      	nop
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr

08003586 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003586:	b480      	push	{r7}
 8003588:	b087      	sub	sp, #28
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	021a      	lsls	r2, r3, #8
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	609a      	str	r2, [r3, #8]
}
 80035ba:	bf00      	nop
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035d8:	2302      	movs	r3, #2
 80035da:	e046      	b.n	800366a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a16      	ldr	r2, [pc, #88]	; (8003674 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00e      	beq.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003628:	d009      	beq.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a12      	ldr	r2, [pc, #72]	; (8003678 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d004      	beq.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a10      	ldr	r2, [pc, #64]	; (800367c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d10c      	bne.n	8003658 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003644:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	4313      	orrs	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr
 8003674:	40012c00 	.word	0x40012c00
 8003678:	40000400 	.word	0x40000400
 800367c:	40000800 	.word	0x40000800

08003680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr

08003692 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr

080036a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e042      	b.n	800373c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fd fd1c 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2224      	movs	r2, #36	; 0x24
 80036d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f82b 	bl	8003744 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695a      	ldr	r2, [r3, #20]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800370c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800371c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800377e:	f023 030c 	bic.w	r3, r3, #12
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6812      	ldr	r2, [r2, #0]
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	430b      	orrs	r3, r1
 800378a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a2c      	ldr	r2, [pc, #176]	; (8003858 <UART_SetConfig+0x114>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d103      	bne.n	80037b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037ac:	f7ff f9aa 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	e002      	b.n	80037ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037b4:	f7ff f992 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 80037b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	009a      	lsls	r2, r3, #2
 80037c4:	441a      	add	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	4a22      	ldr	r2, [pc, #136]	; (800385c <UART_SetConfig+0x118>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	0119      	lsls	r1, r3, #4
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	009a      	lsls	r2, r3, #2
 80037e4:	441a      	add	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80037f0:	4b1a      	ldr	r3, [pc, #104]	; (800385c <UART_SetConfig+0x118>)
 80037f2:	fba3 0302 	umull	r0, r3, r3, r2
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	2064      	movs	r0, #100	; 0x64
 80037fa:	fb00 f303 	mul.w	r3, r0, r3
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	3332      	adds	r3, #50	; 0x32
 8003804:	4a15      	ldr	r2, [pc, #84]	; (800385c <UART_SetConfig+0x118>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003810:	4419      	add	r1, r3
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	009a      	lsls	r2, r3, #2
 800381c:	441a      	add	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	fbb2 f2f3 	udiv	r2, r2, r3
 8003828:	4b0c      	ldr	r3, [pc, #48]	; (800385c <UART_SetConfig+0x118>)
 800382a:	fba3 0302 	umull	r0, r3, r3, r2
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	2064      	movs	r0, #100	; 0x64
 8003832:	fb00 f303 	mul.w	r3, r0, r3
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	3332      	adds	r3, #50	; 0x32
 800383c:	4a07      	ldr	r2, [pc, #28]	; (800385c <UART_SetConfig+0x118>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	f003 020f 	and.w	r2, r3, #15
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	440a      	add	r2, r1
 800384e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40013800 	.word	0x40013800
 800385c:	51eb851f 	.word	0x51eb851f

08003860 <std>:
 8003860:	2300      	movs	r3, #0
 8003862:	b510      	push	{r4, lr}
 8003864:	4604      	mov	r4, r0
 8003866:	e9c0 3300 	strd	r3, r3, [r0]
 800386a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800386e:	6083      	str	r3, [r0, #8]
 8003870:	8181      	strh	r1, [r0, #12]
 8003872:	6643      	str	r3, [r0, #100]	; 0x64
 8003874:	81c2      	strh	r2, [r0, #14]
 8003876:	6183      	str	r3, [r0, #24]
 8003878:	4619      	mov	r1, r3
 800387a:	2208      	movs	r2, #8
 800387c:	305c      	adds	r0, #92	; 0x5c
 800387e:	f000 f906 	bl	8003a8e <memset>
 8003882:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <std+0x58>)
 8003884:	6224      	str	r4, [r4, #32]
 8003886:	6263      	str	r3, [r4, #36]	; 0x24
 8003888:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <std+0x5c>)
 800388a:	62a3      	str	r3, [r4, #40]	; 0x28
 800388c:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <std+0x60>)
 800388e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003890:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <std+0x64>)
 8003892:	6323      	str	r3, [r4, #48]	; 0x30
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <std+0x68>)
 8003896:	429c      	cmp	r4, r3
 8003898:	d006      	beq.n	80038a8 <std+0x48>
 800389a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800389e:	4294      	cmp	r4, r2
 80038a0:	d002      	beq.n	80038a8 <std+0x48>
 80038a2:	33d0      	adds	r3, #208	; 0xd0
 80038a4:	429c      	cmp	r4, r3
 80038a6:	d105      	bne.n	80038b4 <std+0x54>
 80038a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80038ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038b0:	f000 b966 	b.w	8003b80 <__retarget_lock_init_recursive>
 80038b4:	bd10      	pop	{r4, pc}
 80038b6:	bf00      	nop
 80038b8:	08003a09 	.word	0x08003a09
 80038bc:	08003a2b 	.word	0x08003a2b
 80038c0:	08003a63 	.word	0x08003a63
 80038c4:	08003a87 	.word	0x08003a87
 80038c8:	200002ac 	.word	0x200002ac

080038cc <stdio_exit_handler>:
 80038cc:	4a02      	ldr	r2, [pc, #8]	; (80038d8 <stdio_exit_handler+0xc>)
 80038ce:	4903      	ldr	r1, [pc, #12]	; (80038dc <stdio_exit_handler+0x10>)
 80038d0:	4803      	ldr	r0, [pc, #12]	; (80038e0 <stdio_exit_handler+0x14>)
 80038d2:	f000 b869 	b.w	80039a8 <_fwalk_sglue>
 80038d6:	bf00      	nop
 80038d8:	2000000c 	.word	0x2000000c
 80038dc:	08004421 	.word	0x08004421
 80038e0:	20000018 	.word	0x20000018

080038e4 <cleanup_stdio>:
 80038e4:	6841      	ldr	r1, [r0, #4]
 80038e6:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <cleanup_stdio+0x34>)
 80038e8:	b510      	push	{r4, lr}
 80038ea:	4299      	cmp	r1, r3
 80038ec:	4604      	mov	r4, r0
 80038ee:	d001      	beq.n	80038f4 <cleanup_stdio+0x10>
 80038f0:	f000 fd96 	bl	8004420 <_fflush_r>
 80038f4:	68a1      	ldr	r1, [r4, #8]
 80038f6:	4b09      	ldr	r3, [pc, #36]	; (800391c <cleanup_stdio+0x38>)
 80038f8:	4299      	cmp	r1, r3
 80038fa:	d002      	beq.n	8003902 <cleanup_stdio+0x1e>
 80038fc:	4620      	mov	r0, r4
 80038fe:	f000 fd8f 	bl	8004420 <_fflush_r>
 8003902:	68e1      	ldr	r1, [r4, #12]
 8003904:	4b06      	ldr	r3, [pc, #24]	; (8003920 <cleanup_stdio+0x3c>)
 8003906:	4299      	cmp	r1, r3
 8003908:	d004      	beq.n	8003914 <cleanup_stdio+0x30>
 800390a:	4620      	mov	r0, r4
 800390c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003910:	f000 bd86 	b.w	8004420 <_fflush_r>
 8003914:	bd10      	pop	{r4, pc}
 8003916:	bf00      	nop
 8003918:	200002ac 	.word	0x200002ac
 800391c:	20000314 	.word	0x20000314
 8003920:	2000037c 	.word	0x2000037c

08003924 <global_stdio_init.part.0>:
 8003924:	b510      	push	{r4, lr}
 8003926:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <global_stdio_init.part.0+0x30>)
 8003928:	4c0b      	ldr	r4, [pc, #44]	; (8003958 <global_stdio_init.part.0+0x34>)
 800392a:	4a0c      	ldr	r2, [pc, #48]	; (800395c <global_stdio_init.part.0+0x38>)
 800392c:	4620      	mov	r0, r4
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	2104      	movs	r1, #4
 8003932:	2200      	movs	r2, #0
 8003934:	f7ff ff94 	bl	8003860 <std>
 8003938:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800393c:	2201      	movs	r2, #1
 800393e:	2109      	movs	r1, #9
 8003940:	f7ff ff8e 	bl	8003860 <std>
 8003944:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003948:	2202      	movs	r2, #2
 800394a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800394e:	2112      	movs	r1, #18
 8003950:	f7ff bf86 	b.w	8003860 <std>
 8003954:	200003e4 	.word	0x200003e4
 8003958:	200002ac 	.word	0x200002ac
 800395c:	080038cd 	.word	0x080038cd

08003960 <__sfp_lock_acquire>:
 8003960:	4801      	ldr	r0, [pc, #4]	; (8003968 <__sfp_lock_acquire+0x8>)
 8003962:	f000 b90e 	b.w	8003b82 <__retarget_lock_acquire_recursive>
 8003966:	bf00      	nop
 8003968:	200003ed 	.word	0x200003ed

0800396c <__sfp_lock_release>:
 800396c:	4801      	ldr	r0, [pc, #4]	; (8003974 <__sfp_lock_release+0x8>)
 800396e:	f000 b909 	b.w	8003b84 <__retarget_lock_release_recursive>
 8003972:	bf00      	nop
 8003974:	200003ed 	.word	0x200003ed

08003978 <__sinit>:
 8003978:	b510      	push	{r4, lr}
 800397a:	4604      	mov	r4, r0
 800397c:	f7ff fff0 	bl	8003960 <__sfp_lock_acquire>
 8003980:	6a23      	ldr	r3, [r4, #32]
 8003982:	b11b      	cbz	r3, 800398c <__sinit+0x14>
 8003984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003988:	f7ff bff0 	b.w	800396c <__sfp_lock_release>
 800398c:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <__sinit+0x28>)
 800398e:	6223      	str	r3, [r4, #32]
 8003990:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <__sinit+0x2c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f5      	bne.n	8003984 <__sinit+0xc>
 8003998:	f7ff ffc4 	bl	8003924 <global_stdio_init.part.0>
 800399c:	e7f2      	b.n	8003984 <__sinit+0xc>
 800399e:	bf00      	nop
 80039a0:	080038e5 	.word	0x080038e5
 80039a4:	200003e4 	.word	0x200003e4

080039a8 <_fwalk_sglue>:
 80039a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039ac:	4607      	mov	r7, r0
 80039ae:	4688      	mov	r8, r1
 80039b0:	4614      	mov	r4, r2
 80039b2:	2600      	movs	r6, #0
 80039b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039b8:	f1b9 0901 	subs.w	r9, r9, #1
 80039bc:	d505      	bpl.n	80039ca <_fwalk_sglue+0x22>
 80039be:	6824      	ldr	r4, [r4, #0]
 80039c0:	2c00      	cmp	r4, #0
 80039c2:	d1f7      	bne.n	80039b4 <_fwalk_sglue+0xc>
 80039c4:	4630      	mov	r0, r6
 80039c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039ca:	89ab      	ldrh	r3, [r5, #12]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d907      	bls.n	80039e0 <_fwalk_sglue+0x38>
 80039d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039d4:	3301      	adds	r3, #1
 80039d6:	d003      	beq.n	80039e0 <_fwalk_sglue+0x38>
 80039d8:	4629      	mov	r1, r5
 80039da:	4638      	mov	r0, r7
 80039dc:	47c0      	blx	r8
 80039de:	4306      	orrs	r6, r0
 80039e0:	3568      	adds	r5, #104	; 0x68
 80039e2:	e7e9      	b.n	80039b8 <_fwalk_sglue+0x10>

080039e4 <iprintf>:
 80039e4:	b40f      	push	{r0, r1, r2, r3}
 80039e6:	b507      	push	{r0, r1, r2, lr}
 80039e8:	4906      	ldr	r1, [pc, #24]	; (8003a04 <iprintf+0x20>)
 80039ea:	ab04      	add	r3, sp, #16
 80039ec:	6808      	ldr	r0, [r1, #0]
 80039ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80039f2:	6881      	ldr	r1, [r0, #8]
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	f000 f9e3 	bl	8003dc0 <_vfiprintf_r>
 80039fa:	b003      	add	sp, #12
 80039fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a00:	b004      	add	sp, #16
 8003a02:	4770      	bx	lr
 8003a04:	20000064 	.word	0x20000064

08003a08 <__sread>:
 8003a08:	b510      	push	{r4, lr}
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a10:	f000 f868 	bl	8003ae4 <_read_r>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	bfab      	itete	ge
 8003a18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a1a:	89a3      	ldrhlt	r3, [r4, #12]
 8003a1c:	181b      	addge	r3, r3, r0
 8003a1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a22:	bfac      	ite	ge
 8003a24:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a26:	81a3      	strhlt	r3, [r4, #12]
 8003a28:	bd10      	pop	{r4, pc}

08003a2a <__swrite>:
 8003a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a2e:	461f      	mov	r7, r3
 8003a30:	898b      	ldrh	r3, [r1, #12]
 8003a32:	4605      	mov	r5, r0
 8003a34:	05db      	lsls	r3, r3, #23
 8003a36:	460c      	mov	r4, r1
 8003a38:	4616      	mov	r6, r2
 8003a3a:	d505      	bpl.n	8003a48 <__swrite+0x1e>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a44:	f000 f83c 	bl	8003ac0 <_lseek_r>
 8003a48:	89a3      	ldrh	r3, [r4, #12]
 8003a4a:	4632      	mov	r2, r6
 8003a4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a50:	81a3      	strh	r3, [r4, #12]
 8003a52:	4628      	mov	r0, r5
 8003a54:	463b      	mov	r3, r7
 8003a56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a5e:	f000 b853 	b.w	8003b08 <_write_r>

08003a62 <__sseek>:
 8003a62:	b510      	push	{r4, lr}
 8003a64:	460c      	mov	r4, r1
 8003a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a6a:	f000 f829 	bl	8003ac0 <_lseek_r>
 8003a6e:	1c43      	adds	r3, r0, #1
 8003a70:	89a3      	ldrh	r3, [r4, #12]
 8003a72:	bf15      	itete	ne
 8003a74:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a7e:	81a3      	strheq	r3, [r4, #12]
 8003a80:	bf18      	it	ne
 8003a82:	81a3      	strhne	r3, [r4, #12]
 8003a84:	bd10      	pop	{r4, pc}

08003a86 <__sclose>:
 8003a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a8a:	f000 b809 	b.w	8003aa0 <_close_r>

08003a8e <memset>:
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4402      	add	r2, r0
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d100      	bne.n	8003a98 <memset+0xa>
 8003a96:	4770      	bx	lr
 8003a98:	f803 1b01 	strb.w	r1, [r3], #1
 8003a9c:	e7f9      	b.n	8003a92 <memset+0x4>
	...

08003aa0 <_close_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	4d05      	ldr	r5, [pc, #20]	; (8003abc <_close_r+0x1c>)
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	4608      	mov	r0, r1
 8003aaa:	602b      	str	r3, [r5, #0]
 8003aac:	f7fd fbe7 	bl	800127e <_close>
 8003ab0:	1c43      	adds	r3, r0, #1
 8003ab2:	d102      	bne.n	8003aba <_close_r+0x1a>
 8003ab4:	682b      	ldr	r3, [r5, #0]
 8003ab6:	b103      	cbz	r3, 8003aba <_close_r+0x1a>
 8003ab8:	6023      	str	r3, [r4, #0]
 8003aba:	bd38      	pop	{r3, r4, r5, pc}
 8003abc:	200003e8 	.word	0x200003e8

08003ac0 <_lseek_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	2200      	movs	r2, #0
 8003aca:	4d05      	ldr	r5, [pc, #20]	; (8003ae0 <_lseek_r+0x20>)
 8003acc:	602a      	str	r2, [r5, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f7fd fbf9 	bl	80012c6 <_lseek>
 8003ad4:	1c43      	adds	r3, r0, #1
 8003ad6:	d102      	bne.n	8003ade <_lseek_r+0x1e>
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	b103      	cbz	r3, 8003ade <_lseek_r+0x1e>
 8003adc:	6023      	str	r3, [r4, #0]
 8003ade:	bd38      	pop	{r3, r4, r5, pc}
 8003ae0:	200003e8 	.word	0x200003e8

08003ae4 <_read_r>:
 8003ae4:	b538      	push	{r3, r4, r5, lr}
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	4608      	mov	r0, r1
 8003aea:	4611      	mov	r1, r2
 8003aec:	2200      	movs	r2, #0
 8003aee:	4d05      	ldr	r5, [pc, #20]	; (8003b04 <_read_r+0x20>)
 8003af0:	602a      	str	r2, [r5, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	f7fd fb8a 	bl	800120c <_read>
 8003af8:	1c43      	adds	r3, r0, #1
 8003afa:	d102      	bne.n	8003b02 <_read_r+0x1e>
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	b103      	cbz	r3, 8003b02 <_read_r+0x1e>
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	bd38      	pop	{r3, r4, r5, pc}
 8003b04:	200003e8 	.word	0x200003e8

08003b08 <_write_r>:
 8003b08:	b538      	push	{r3, r4, r5, lr}
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	4608      	mov	r0, r1
 8003b0e:	4611      	mov	r1, r2
 8003b10:	2200      	movs	r2, #0
 8003b12:	4d05      	ldr	r5, [pc, #20]	; (8003b28 <_write_r+0x20>)
 8003b14:	602a      	str	r2, [r5, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	f7fd fb95 	bl	8001246 <_write>
 8003b1c:	1c43      	adds	r3, r0, #1
 8003b1e:	d102      	bne.n	8003b26 <_write_r+0x1e>
 8003b20:	682b      	ldr	r3, [r5, #0]
 8003b22:	b103      	cbz	r3, 8003b26 <_write_r+0x1e>
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	bd38      	pop	{r3, r4, r5, pc}
 8003b28:	200003e8 	.word	0x200003e8

08003b2c <__errno>:
 8003b2c:	4b01      	ldr	r3, [pc, #4]	; (8003b34 <__errno+0x8>)
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20000064 	.word	0x20000064

08003b38 <__libc_init_array>:
 8003b38:	b570      	push	{r4, r5, r6, lr}
 8003b3a:	2600      	movs	r6, #0
 8003b3c:	4d0c      	ldr	r5, [pc, #48]	; (8003b70 <__libc_init_array+0x38>)
 8003b3e:	4c0d      	ldr	r4, [pc, #52]	; (8003b74 <__libc_init_array+0x3c>)
 8003b40:	1b64      	subs	r4, r4, r5
 8003b42:	10a4      	asrs	r4, r4, #2
 8003b44:	42a6      	cmp	r6, r4
 8003b46:	d109      	bne.n	8003b5c <__libc_init_array+0x24>
 8003b48:	f000 fdca 	bl	80046e0 <_init>
 8003b4c:	2600      	movs	r6, #0
 8003b4e:	4d0a      	ldr	r5, [pc, #40]	; (8003b78 <__libc_init_array+0x40>)
 8003b50:	4c0a      	ldr	r4, [pc, #40]	; (8003b7c <__libc_init_array+0x44>)
 8003b52:	1b64      	subs	r4, r4, r5
 8003b54:	10a4      	asrs	r4, r4, #2
 8003b56:	42a6      	cmp	r6, r4
 8003b58:	d105      	bne.n	8003b66 <__libc_init_array+0x2e>
 8003b5a:	bd70      	pop	{r4, r5, r6, pc}
 8003b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b60:	4798      	blx	r3
 8003b62:	3601      	adds	r6, #1
 8003b64:	e7ee      	b.n	8003b44 <__libc_init_array+0xc>
 8003b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b6a:	4798      	blx	r3
 8003b6c:	3601      	adds	r6, #1
 8003b6e:	e7f2      	b.n	8003b56 <__libc_init_array+0x1e>
 8003b70:	08004778 	.word	0x08004778
 8003b74:	08004778 	.word	0x08004778
 8003b78:	08004778 	.word	0x08004778
 8003b7c:	0800477c 	.word	0x0800477c

08003b80 <__retarget_lock_init_recursive>:
 8003b80:	4770      	bx	lr

08003b82 <__retarget_lock_acquire_recursive>:
 8003b82:	4770      	bx	lr

08003b84 <__retarget_lock_release_recursive>:
 8003b84:	4770      	bx	lr
	...

08003b88 <_free_r>:
 8003b88:	b538      	push	{r3, r4, r5, lr}
 8003b8a:	4605      	mov	r5, r0
 8003b8c:	2900      	cmp	r1, #0
 8003b8e:	d040      	beq.n	8003c12 <_free_r+0x8a>
 8003b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b94:	1f0c      	subs	r4, r1, #4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bfb8      	it	lt
 8003b9a:	18e4      	addlt	r4, r4, r3
 8003b9c:	f000 f8dc 	bl	8003d58 <__malloc_lock>
 8003ba0:	4a1c      	ldr	r2, [pc, #112]	; (8003c14 <_free_r+0x8c>)
 8003ba2:	6813      	ldr	r3, [r2, #0]
 8003ba4:	b933      	cbnz	r3, 8003bb4 <_free_r+0x2c>
 8003ba6:	6063      	str	r3, [r4, #4]
 8003ba8:	6014      	str	r4, [r2, #0]
 8003baa:	4628      	mov	r0, r5
 8003bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bb0:	f000 b8d8 	b.w	8003d64 <__malloc_unlock>
 8003bb4:	42a3      	cmp	r3, r4
 8003bb6:	d908      	bls.n	8003bca <_free_r+0x42>
 8003bb8:	6820      	ldr	r0, [r4, #0]
 8003bba:	1821      	adds	r1, r4, r0
 8003bbc:	428b      	cmp	r3, r1
 8003bbe:	bf01      	itttt	eq
 8003bc0:	6819      	ldreq	r1, [r3, #0]
 8003bc2:	685b      	ldreq	r3, [r3, #4]
 8003bc4:	1809      	addeq	r1, r1, r0
 8003bc6:	6021      	streq	r1, [r4, #0]
 8003bc8:	e7ed      	b.n	8003ba6 <_free_r+0x1e>
 8003bca:	461a      	mov	r2, r3
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	b10b      	cbz	r3, 8003bd4 <_free_r+0x4c>
 8003bd0:	42a3      	cmp	r3, r4
 8003bd2:	d9fa      	bls.n	8003bca <_free_r+0x42>
 8003bd4:	6811      	ldr	r1, [r2, #0]
 8003bd6:	1850      	adds	r0, r2, r1
 8003bd8:	42a0      	cmp	r0, r4
 8003bda:	d10b      	bne.n	8003bf4 <_free_r+0x6c>
 8003bdc:	6820      	ldr	r0, [r4, #0]
 8003bde:	4401      	add	r1, r0
 8003be0:	1850      	adds	r0, r2, r1
 8003be2:	4283      	cmp	r3, r0
 8003be4:	6011      	str	r1, [r2, #0]
 8003be6:	d1e0      	bne.n	8003baa <_free_r+0x22>
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4408      	add	r0, r1
 8003bee:	6010      	str	r0, [r2, #0]
 8003bf0:	6053      	str	r3, [r2, #4]
 8003bf2:	e7da      	b.n	8003baa <_free_r+0x22>
 8003bf4:	d902      	bls.n	8003bfc <_free_r+0x74>
 8003bf6:	230c      	movs	r3, #12
 8003bf8:	602b      	str	r3, [r5, #0]
 8003bfa:	e7d6      	b.n	8003baa <_free_r+0x22>
 8003bfc:	6820      	ldr	r0, [r4, #0]
 8003bfe:	1821      	adds	r1, r4, r0
 8003c00:	428b      	cmp	r3, r1
 8003c02:	bf01      	itttt	eq
 8003c04:	6819      	ldreq	r1, [r3, #0]
 8003c06:	685b      	ldreq	r3, [r3, #4]
 8003c08:	1809      	addeq	r1, r1, r0
 8003c0a:	6021      	streq	r1, [r4, #0]
 8003c0c:	6063      	str	r3, [r4, #4]
 8003c0e:	6054      	str	r4, [r2, #4]
 8003c10:	e7cb      	b.n	8003baa <_free_r+0x22>
 8003c12:	bd38      	pop	{r3, r4, r5, pc}
 8003c14:	200003f0 	.word	0x200003f0

08003c18 <sbrk_aligned>:
 8003c18:	b570      	push	{r4, r5, r6, lr}
 8003c1a:	4e0e      	ldr	r6, [pc, #56]	; (8003c54 <sbrk_aligned+0x3c>)
 8003c1c:	460c      	mov	r4, r1
 8003c1e:	6831      	ldr	r1, [r6, #0]
 8003c20:	4605      	mov	r5, r0
 8003c22:	b911      	cbnz	r1, 8003c2a <sbrk_aligned+0x12>
 8003c24:	f000 fcba 	bl	800459c <_sbrk_r>
 8003c28:	6030      	str	r0, [r6, #0]
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	f000 fcb5 	bl	800459c <_sbrk_r>
 8003c32:	1c43      	adds	r3, r0, #1
 8003c34:	d00a      	beq.n	8003c4c <sbrk_aligned+0x34>
 8003c36:	1cc4      	adds	r4, r0, #3
 8003c38:	f024 0403 	bic.w	r4, r4, #3
 8003c3c:	42a0      	cmp	r0, r4
 8003c3e:	d007      	beq.n	8003c50 <sbrk_aligned+0x38>
 8003c40:	1a21      	subs	r1, r4, r0
 8003c42:	4628      	mov	r0, r5
 8003c44:	f000 fcaa 	bl	800459c <_sbrk_r>
 8003c48:	3001      	adds	r0, #1
 8003c4a:	d101      	bne.n	8003c50 <sbrk_aligned+0x38>
 8003c4c:	f04f 34ff 	mov.w	r4, #4294967295
 8003c50:	4620      	mov	r0, r4
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	200003f4 	.word	0x200003f4

08003c58 <_malloc_r>:
 8003c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c5c:	1ccd      	adds	r5, r1, #3
 8003c5e:	f025 0503 	bic.w	r5, r5, #3
 8003c62:	3508      	adds	r5, #8
 8003c64:	2d0c      	cmp	r5, #12
 8003c66:	bf38      	it	cc
 8003c68:	250c      	movcc	r5, #12
 8003c6a:	2d00      	cmp	r5, #0
 8003c6c:	4607      	mov	r7, r0
 8003c6e:	db01      	blt.n	8003c74 <_malloc_r+0x1c>
 8003c70:	42a9      	cmp	r1, r5
 8003c72:	d905      	bls.n	8003c80 <_malloc_r+0x28>
 8003c74:	230c      	movs	r3, #12
 8003c76:	2600      	movs	r6, #0
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d54 <_malloc_r+0xfc>
 8003c84:	f000 f868 	bl	8003d58 <__malloc_lock>
 8003c88:	f8d8 3000 	ldr.w	r3, [r8]
 8003c8c:	461c      	mov	r4, r3
 8003c8e:	bb5c      	cbnz	r4, 8003ce8 <_malloc_r+0x90>
 8003c90:	4629      	mov	r1, r5
 8003c92:	4638      	mov	r0, r7
 8003c94:	f7ff ffc0 	bl	8003c18 <sbrk_aligned>
 8003c98:	1c43      	adds	r3, r0, #1
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	d155      	bne.n	8003d4a <_malloc_r+0xf2>
 8003c9e:	f8d8 4000 	ldr.w	r4, [r8]
 8003ca2:	4626      	mov	r6, r4
 8003ca4:	2e00      	cmp	r6, #0
 8003ca6:	d145      	bne.n	8003d34 <_malloc_r+0xdc>
 8003ca8:	2c00      	cmp	r4, #0
 8003caa:	d048      	beq.n	8003d3e <_malloc_r+0xe6>
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	4631      	mov	r1, r6
 8003cb0:	4638      	mov	r0, r7
 8003cb2:	eb04 0903 	add.w	r9, r4, r3
 8003cb6:	f000 fc71 	bl	800459c <_sbrk_r>
 8003cba:	4581      	cmp	r9, r0
 8003cbc:	d13f      	bne.n	8003d3e <_malloc_r+0xe6>
 8003cbe:	6821      	ldr	r1, [r4, #0]
 8003cc0:	4638      	mov	r0, r7
 8003cc2:	1a6d      	subs	r5, r5, r1
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	f7ff ffa7 	bl	8003c18 <sbrk_aligned>
 8003cca:	3001      	adds	r0, #1
 8003ccc:	d037      	beq.n	8003d3e <_malloc_r+0xe6>
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	442b      	add	r3, r5
 8003cd2:	6023      	str	r3, [r4, #0]
 8003cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d038      	beq.n	8003d4e <_malloc_r+0xf6>
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	42a2      	cmp	r2, r4
 8003ce0:	d12b      	bne.n	8003d3a <_malloc_r+0xe2>
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	e00f      	b.n	8003d08 <_malloc_r+0xb0>
 8003ce8:	6822      	ldr	r2, [r4, #0]
 8003cea:	1b52      	subs	r2, r2, r5
 8003cec:	d41f      	bmi.n	8003d2e <_malloc_r+0xd6>
 8003cee:	2a0b      	cmp	r2, #11
 8003cf0:	d917      	bls.n	8003d22 <_malloc_r+0xca>
 8003cf2:	1961      	adds	r1, r4, r5
 8003cf4:	42a3      	cmp	r3, r4
 8003cf6:	6025      	str	r5, [r4, #0]
 8003cf8:	bf18      	it	ne
 8003cfa:	6059      	strne	r1, [r3, #4]
 8003cfc:	6863      	ldr	r3, [r4, #4]
 8003cfe:	bf08      	it	eq
 8003d00:	f8c8 1000 	streq.w	r1, [r8]
 8003d04:	5162      	str	r2, [r4, r5]
 8003d06:	604b      	str	r3, [r1, #4]
 8003d08:	4638      	mov	r0, r7
 8003d0a:	f104 060b 	add.w	r6, r4, #11
 8003d0e:	f000 f829 	bl	8003d64 <__malloc_unlock>
 8003d12:	f026 0607 	bic.w	r6, r6, #7
 8003d16:	1d23      	adds	r3, r4, #4
 8003d18:	1af2      	subs	r2, r6, r3
 8003d1a:	d0ae      	beq.n	8003c7a <_malloc_r+0x22>
 8003d1c:	1b9b      	subs	r3, r3, r6
 8003d1e:	50a3      	str	r3, [r4, r2]
 8003d20:	e7ab      	b.n	8003c7a <_malloc_r+0x22>
 8003d22:	42a3      	cmp	r3, r4
 8003d24:	6862      	ldr	r2, [r4, #4]
 8003d26:	d1dd      	bne.n	8003ce4 <_malloc_r+0x8c>
 8003d28:	f8c8 2000 	str.w	r2, [r8]
 8003d2c:	e7ec      	b.n	8003d08 <_malloc_r+0xb0>
 8003d2e:	4623      	mov	r3, r4
 8003d30:	6864      	ldr	r4, [r4, #4]
 8003d32:	e7ac      	b.n	8003c8e <_malloc_r+0x36>
 8003d34:	4634      	mov	r4, r6
 8003d36:	6876      	ldr	r6, [r6, #4]
 8003d38:	e7b4      	b.n	8003ca4 <_malloc_r+0x4c>
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	e7cc      	b.n	8003cd8 <_malloc_r+0x80>
 8003d3e:	230c      	movs	r3, #12
 8003d40:	4638      	mov	r0, r7
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	f000 f80e 	bl	8003d64 <__malloc_unlock>
 8003d48:	e797      	b.n	8003c7a <_malloc_r+0x22>
 8003d4a:	6025      	str	r5, [r4, #0]
 8003d4c:	e7dc      	b.n	8003d08 <_malloc_r+0xb0>
 8003d4e:	605b      	str	r3, [r3, #4]
 8003d50:	deff      	udf	#255	; 0xff
 8003d52:	bf00      	nop
 8003d54:	200003f0 	.word	0x200003f0

08003d58 <__malloc_lock>:
 8003d58:	4801      	ldr	r0, [pc, #4]	; (8003d60 <__malloc_lock+0x8>)
 8003d5a:	f7ff bf12 	b.w	8003b82 <__retarget_lock_acquire_recursive>
 8003d5e:	bf00      	nop
 8003d60:	200003ec 	.word	0x200003ec

08003d64 <__malloc_unlock>:
 8003d64:	4801      	ldr	r0, [pc, #4]	; (8003d6c <__malloc_unlock+0x8>)
 8003d66:	f7ff bf0d 	b.w	8003b84 <__retarget_lock_release_recursive>
 8003d6a:	bf00      	nop
 8003d6c:	200003ec 	.word	0x200003ec

08003d70 <__sfputc_r>:
 8003d70:	6893      	ldr	r3, [r2, #8]
 8003d72:	b410      	push	{r4}
 8003d74:	3b01      	subs	r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	6093      	str	r3, [r2, #8]
 8003d7a:	da07      	bge.n	8003d8c <__sfputc_r+0x1c>
 8003d7c:	6994      	ldr	r4, [r2, #24]
 8003d7e:	42a3      	cmp	r3, r4
 8003d80:	db01      	blt.n	8003d86 <__sfputc_r+0x16>
 8003d82:	290a      	cmp	r1, #10
 8003d84:	d102      	bne.n	8003d8c <__sfputc_r+0x1c>
 8003d86:	bc10      	pop	{r4}
 8003d88:	f000 bb72 	b.w	8004470 <__swbuf_r>
 8003d8c:	6813      	ldr	r3, [r2, #0]
 8003d8e:	1c58      	adds	r0, r3, #1
 8003d90:	6010      	str	r0, [r2, #0]
 8003d92:	7019      	strb	r1, [r3, #0]
 8003d94:	4608      	mov	r0, r1
 8003d96:	bc10      	pop	{r4}
 8003d98:	4770      	bx	lr

08003d9a <__sfputs_r>:
 8003d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9c:	4606      	mov	r6, r0
 8003d9e:	460f      	mov	r7, r1
 8003da0:	4614      	mov	r4, r2
 8003da2:	18d5      	adds	r5, r2, r3
 8003da4:	42ac      	cmp	r4, r5
 8003da6:	d101      	bne.n	8003dac <__sfputs_r+0x12>
 8003da8:	2000      	movs	r0, #0
 8003daa:	e007      	b.n	8003dbc <__sfputs_r+0x22>
 8003dac:	463a      	mov	r2, r7
 8003dae:	4630      	mov	r0, r6
 8003db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003db4:	f7ff ffdc 	bl	8003d70 <__sfputc_r>
 8003db8:	1c43      	adds	r3, r0, #1
 8003dba:	d1f3      	bne.n	8003da4 <__sfputs_r+0xa>
 8003dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003dc0 <_vfiprintf_r>:
 8003dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc4:	460d      	mov	r5, r1
 8003dc6:	4614      	mov	r4, r2
 8003dc8:	4698      	mov	r8, r3
 8003dca:	4606      	mov	r6, r0
 8003dcc:	b09d      	sub	sp, #116	; 0x74
 8003dce:	b118      	cbz	r0, 8003dd8 <_vfiprintf_r+0x18>
 8003dd0:	6a03      	ldr	r3, [r0, #32]
 8003dd2:	b90b      	cbnz	r3, 8003dd8 <_vfiprintf_r+0x18>
 8003dd4:	f7ff fdd0 	bl	8003978 <__sinit>
 8003dd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dda:	07d9      	lsls	r1, r3, #31
 8003ddc:	d405      	bmi.n	8003dea <_vfiprintf_r+0x2a>
 8003dde:	89ab      	ldrh	r3, [r5, #12]
 8003de0:	059a      	lsls	r2, r3, #22
 8003de2:	d402      	bmi.n	8003dea <_vfiprintf_r+0x2a>
 8003de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003de6:	f7ff fecc 	bl	8003b82 <__retarget_lock_acquire_recursive>
 8003dea:	89ab      	ldrh	r3, [r5, #12]
 8003dec:	071b      	lsls	r3, r3, #28
 8003dee:	d501      	bpl.n	8003df4 <_vfiprintf_r+0x34>
 8003df0:	692b      	ldr	r3, [r5, #16]
 8003df2:	b99b      	cbnz	r3, 8003e1c <_vfiprintf_r+0x5c>
 8003df4:	4629      	mov	r1, r5
 8003df6:	4630      	mov	r0, r6
 8003df8:	f000 fb78 	bl	80044ec <__swsetup_r>
 8003dfc:	b170      	cbz	r0, 8003e1c <_vfiprintf_r+0x5c>
 8003dfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e00:	07dc      	lsls	r4, r3, #31
 8003e02:	d504      	bpl.n	8003e0e <_vfiprintf_r+0x4e>
 8003e04:	f04f 30ff 	mov.w	r0, #4294967295
 8003e08:	b01d      	add	sp, #116	; 0x74
 8003e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e0e:	89ab      	ldrh	r3, [r5, #12]
 8003e10:	0598      	lsls	r0, r3, #22
 8003e12:	d4f7      	bmi.n	8003e04 <_vfiprintf_r+0x44>
 8003e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e16:	f7ff feb5 	bl	8003b84 <__retarget_lock_release_recursive>
 8003e1a:	e7f3      	b.n	8003e04 <_vfiprintf_r+0x44>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e20:	2320      	movs	r3, #32
 8003e22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e26:	2330      	movs	r3, #48	; 0x30
 8003e28:	f04f 0901 	mov.w	r9, #1
 8003e2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e30:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003fe0 <_vfiprintf_r+0x220>
 8003e34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e38:	4623      	mov	r3, r4
 8003e3a:	469a      	mov	sl, r3
 8003e3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e40:	b10a      	cbz	r2, 8003e46 <_vfiprintf_r+0x86>
 8003e42:	2a25      	cmp	r2, #37	; 0x25
 8003e44:	d1f9      	bne.n	8003e3a <_vfiprintf_r+0x7a>
 8003e46:	ebba 0b04 	subs.w	fp, sl, r4
 8003e4a:	d00b      	beq.n	8003e64 <_vfiprintf_r+0xa4>
 8003e4c:	465b      	mov	r3, fp
 8003e4e:	4622      	mov	r2, r4
 8003e50:	4629      	mov	r1, r5
 8003e52:	4630      	mov	r0, r6
 8003e54:	f7ff ffa1 	bl	8003d9a <__sfputs_r>
 8003e58:	3001      	adds	r0, #1
 8003e5a:	f000 80a9 	beq.w	8003fb0 <_vfiprintf_r+0x1f0>
 8003e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e60:	445a      	add	r2, fp
 8003e62:	9209      	str	r2, [sp, #36]	; 0x24
 8003e64:	f89a 3000 	ldrb.w	r3, [sl]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 80a1 	beq.w	8003fb0 <_vfiprintf_r+0x1f0>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f04f 32ff 	mov.w	r2, #4294967295
 8003e74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e78:	f10a 0a01 	add.w	sl, sl, #1
 8003e7c:	9304      	str	r3, [sp, #16]
 8003e7e:	9307      	str	r3, [sp, #28]
 8003e80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e84:	931a      	str	r3, [sp, #104]	; 0x68
 8003e86:	4654      	mov	r4, sl
 8003e88:	2205      	movs	r2, #5
 8003e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e8e:	4854      	ldr	r0, [pc, #336]	; (8003fe0 <_vfiprintf_r+0x220>)
 8003e90:	f000 fb94 	bl	80045bc <memchr>
 8003e94:	9a04      	ldr	r2, [sp, #16]
 8003e96:	b9d8      	cbnz	r0, 8003ed0 <_vfiprintf_r+0x110>
 8003e98:	06d1      	lsls	r1, r2, #27
 8003e9a:	bf44      	itt	mi
 8003e9c:	2320      	movmi	r3, #32
 8003e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ea2:	0713      	lsls	r3, r2, #28
 8003ea4:	bf44      	itt	mi
 8003ea6:	232b      	movmi	r3, #43	; 0x2b
 8003ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eac:	f89a 3000 	ldrb.w	r3, [sl]
 8003eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8003eb2:	d015      	beq.n	8003ee0 <_vfiprintf_r+0x120>
 8003eb4:	4654      	mov	r4, sl
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	f04f 0c0a 	mov.w	ip, #10
 8003ebc:	9a07      	ldr	r2, [sp, #28]
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ec4:	3b30      	subs	r3, #48	; 0x30
 8003ec6:	2b09      	cmp	r3, #9
 8003ec8:	d94d      	bls.n	8003f66 <_vfiprintf_r+0x1a6>
 8003eca:	b1b0      	cbz	r0, 8003efa <_vfiprintf_r+0x13a>
 8003ecc:	9207      	str	r2, [sp, #28]
 8003ece:	e014      	b.n	8003efa <_vfiprintf_r+0x13a>
 8003ed0:	eba0 0308 	sub.w	r3, r0, r8
 8003ed4:	fa09 f303 	lsl.w	r3, r9, r3
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	46a2      	mov	sl, r4
 8003edc:	9304      	str	r3, [sp, #16]
 8003ede:	e7d2      	b.n	8003e86 <_vfiprintf_r+0xc6>
 8003ee0:	9b03      	ldr	r3, [sp, #12]
 8003ee2:	1d19      	adds	r1, r3, #4
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	9103      	str	r1, [sp, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bfbb      	ittet	lt
 8003eec:	425b      	neglt	r3, r3
 8003eee:	f042 0202 	orrlt.w	r2, r2, #2
 8003ef2:	9307      	strge	r3, [sp, #28]
 8003ef4:	9307      	strlt	r3, [sp, #28]
 8003ef6:	bfb8      	it	lt
 8003ef8:	9204      	strlt	r2, [sp, #16]
 8003efa:	7823      	ldrb	r3, [r4, #0]
 8003efc:	2b2e      	cmp	r3, #46	; 0x2e
 8003efe:	d10c      	bne.n	8003f1a <_vfiprintf_r+0x15a>
 8003f00:	7863      	ldrb	r3, [r4, #1]
 8003f02:	2b2a      	cmp	r3, #42	; 0x2a
 8003f04:	d134      	bne.n	8003f70 <_vfiprintf_r+0x1b0>
 8003f06:	9b03      	ldr	r3, [sp, #12]
 8003f08:	3402      	adds	r4, #2
 8003f0a:	1d1a      	adds	r2, r3, #4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	9203      	str	r2, [sp, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bfb8      	it	lt
 8003f14:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f18:	9305      	str	r3, [sp, #20]
 8003f1a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003fe4 <_vfiprintf_r+0x224>
 8003f1e:	2203      	movs	r2, #3
 8003f20:	4650      	mov	r0, sl
 8003f22:	7821      	ldrb	r1, [r4, #0]
 8003f24:	f000 fb4a 	bl	80045bc <memchr>
 8003f28:	b138      	cbz	r0, 8003f3a <_vfiprintf_r+0x17a>
 8003f2a:	2240      	movs	r2, #64	; 0x40
 8003f2c:	9b04      	ldr	r3, [sp, #16]
 8003f2e:	eba0 000a 	sub.w	r0, r0, sl
 8003f32:	4082      	lsls	r2, r0
 8003f34:	4313      	orrs	r3, r2
 8003f36:	3401      	adds	r4, #1
 8003f38:	9304      	str	r3, [sp, #16]
 8003f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f3e:	2206      	movs	r2, #6
 8003f40:	4829      	ldr	r0, [pc, #164]	; (8003fe8 <_vfiprintf_r+0x228>)
 8003f42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f46:	f000 fb39 	bl	80045bc <memchr>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d03f      	beq.n	8003fce <_vfiprintf_r+0x20e>
 8003f4e:	4b27      	ldr	r3, [pc, #156]	; (8003fec <_vfiprintf_r+0x22c>)
 8003f50:	bb1b      	cbnz	r3, 8003f9a <_vfiprintf_r+0x1da>
 8003f52:	9b03      	ldr	r3, [sp, #12]
 8003f54:	3307      	adds	r3, #7
 8003f56:	f023 0307 	bic.w	r3, r3, #7
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	9303      	str	r3, [sp, #12]
 8003f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f60:	443b      	add	r3, r7
 8003f62:	9309      	str	r3, [sp, #36]	; 0x24
 8003f64:	e768      	b.n	8003e38 <_vfiprintf_r+0x78>
 8003f66:	460c      	mov	r4, r1
 8003f68:	2001      	movs	r0, #1
 8003f6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f6e:	e7a6      	b.n	8003ebe <_vfiprintf_r+0xfe>
 8003f70:	2300      	movs	r3, #0
 8003f72:	f04f 0c0a 	mov.w	ip, #10
 8003f76:	4619      	mov	r1, r3
 8003f78:	3401      	adds	r4, #1
 8003f7a:	9305      	str	r3, [sp, #20]
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f82:	3a30      	subs	r2, #48	; 0x30
 8003f84:	2a09      	cmp	r2, #9
 8003f86:	d903      	bls.n	8003f90 <_vfiprintf_r+0x1d0>
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0c6      	beq.n	8003f1a <_vfiprintf_r+0x15a>
 8003f8c:	9105      	str	r1, [sp, #20]
 8003f8e:	e7c4      	b.n	8003f1a <_vfiprintf_r+0x15a>
 8003f90:	4604      	mov	r4, r0
 8003f92:	2301      	movs	r3, #1
 8003f94:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f98:	e7f0      	b.n	8003f7c <_vfiprintf_r+0x1bc>
 8003f9a:	ab03      	add	r3, sp, #12
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	462a      	mov	r2, r5
 8003fa0:	4630      	mov	r0, r6
 8003fa2:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <_vfiprintf_r+0x230>)
 8003fa4:	a904      	add	r1, sp, #16
 8003fa6:	f3af 8000 	nop.w
 8003faa:	4607      	mov	r7, r0
 8003fac:	1c78      	adds	r0, r7, #1
 8003fae:	d1d6      	bne.n	8003f5e <_vfiprintf_r+0x19e>
 8003fb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fb2:	07d9      	lsls	r1, r3, #31
 8003fb4:	d405      	bmi.n	8003fc2 <_vfiprintf_r+0x202>
 8003fb6:	89ab      	ldrh	r3, [r5, #12]
 8003fb8:	059a      	lsls	r2, r3, #22
 8003fba:	d402      	bmi.n	8003fc2 <_vfiprintf_r+0x202>
 8003fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fbe:	f7ff fde1 	bl	8003b84 <__retarget_lock_release_recursive>
 8003fc2:	89ab      	ldrh	r3, [r5, #12]
 8003fc4:	065b      	lsls	r3, r3, #25
 8003fc6:	f53f af1d 	bmi.w	8003e04 <_vfiprintf_r+0x44>
 8003fca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fcc:	e71c      	b.n	8003e08 <_vfiprintf_r+0x48>
 8003fce:	ab03      	add	r3, sp, #12
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	462a      	mov	r2, r5
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <_vfiprintf_r+0x230>)
 8003fd8:	a904      	add	r1, sp, #16
 8003fda:	f000 f87d 	bl	80040d8 <_printf_i>
 8003fde:	e7e4      	b.n	8003faa <_vfiprintf_r+0x1ea>
 8003fe0:	08004742 	.word	0x08004742
 8003fe4:	08004748 	.word	0x08004748
 8003fe8:	0800474c 	.word	0x0800474c
 8003fec:	00000000 	.word	0x00000000
 8003ff0:	08003d9b 	.word	0x08003d9b

08003ff4 <_printf_common>:
 8003ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff8:	4616      	mov	r6, r2
 8003ffa:	4699      	mov	r9, r3
 8003ffc:	688a      	ldr	r2, [r1, #8]
 8003ffe:	690b      	ldr	r3, [r1, #16]
 8004000:	4607      	mov	r7, r0
 8004002:	4293      	cmp	r3, r2
 8004004:	bfb8      	it	lt
 8004006:	4613      	movlt	r3, r2
 8004008:	6033      	str	r3, [r6, #0]
 800400a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800400e:	460c      	mov	r4, r1
 8004010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004014:	b10a      	cbz	r2, 800401a <_printf_common+0x26>
 8004016:	3301      	adds	r3, #1
 8004018:	6033      	str	r3, [r6, #0]
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	0699      	lsls	r1, r3, #26
 800401e:	bf42      	ittt	mi
 8004020:	6833      	ldrmi	r3, [r6, #0]
 8004022:	3302      	addmi	r3, #2
 8004024:	6033      	strmi	r3, [r6, #0]
 8004026:	6825      	ldr	r5, [r4, #0]
 8004028:	f015 0506 	ands.w	r5, r5, #6
 800402c:	d106      	bne.n	800403c <_printf_common+0x48>
 800402e:	f104 0a19 	add.w	sl, r4, #25
 8004032:	68e3      	ldr	r3, [r4, #12]
 8004034:	6832      	ldr	r2, [r6, #0]
 8004036:	1a9b      	subs	r3, r3, r2
 8004038:	42ab      	cmp	r3, r5
 800403a:	dc2b      	bgt.n	8004094 <_printf_common+0xa0>
 800403c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004040:	1e13      	subs	r3, r2, #0
 8004042:	6822      	ldr	r2, [r4, #0]
 8004044:	bf18      	it	ne
 8004046:	2301      	movne	r3, #1
 8004048:	0692      	lsls	r2, r2, #26
 800404a:	d430      	bmi.n	80040ae <_printf_common+0xba>
 800404c:	4649      	mov	r1, r9
 800404e:	4638      	mov	r0, r7
 8004050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004054:	47c0      	blx	r8
 8004056:	3001      	adds	r0, #1
 8004058:	d023      	beq.n	80040a2 <_printf_common+0xae>
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	6922      	ldr	r2, [r4, #16]
 800405e:	f003 0306 	and.w	r3, r3, #6
 8004062:	2b04      	cmp	r3, #4
 8004064:	bf14      	ite	ne
 8004066:	2500      	movne	r5, #0
 8004068:	6833      	ldreq	r3, [r6, #0]
 800406a:	f04f 0600 	mov.w	r6, #0
 800406e:	bf08      	it	eq
 8004070:	68e5      	ldreq	r5, [r4, #12]
 8004072:	f104 041a 	add.w	r4, r4, #26
 8004076:	bf08      	it	eq
 8004078:	1aed      	subeq	r5, r5, r3
 800407a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800407e:	bf08      	it	eq
 8004080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004084:	4293      	cmp	r3, r2
 8004086:	bfc4      	itt	gt
 8004088:	1a9b      	subgt	r3, r3, r2
 800408a:	18ed      	addgt	r5, r5, r3
 800408c:	42b5      	cmp	r5, r6
 800408e:	d11a      	bne.n	80040c6 <_printf_common+0xd2>
 8004090:	2000      	movs	r0, #0
 8004092:	e008      	b.n	80040a6 <_printf_common+0xb2>
 8004094:	2301      	movs	r3, #1
 8004096:	4652      	mov	r2, sl
 8004098:	4649      	mov	r1, r9
 800409a:	4638      	mov	r0, r7
 800409c:	47c0      	blx	r8
 800409e:	3001      	adds	r0, #1
 80040a0:	d103      	bne.n	80040aa <_printf_common+0xb6>
 80040a2:	f04f 30ff 	mov.w	r0, #4294967295
 80040a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040aa:	3501      	adds	r5, #1
 80040ac:	e7c1      	b.n	8004032 <_printf_common+0x3e>
 80040ae:	2030      	movs	r0, #48	; 0x30
 80040b0:	18e1      	adds	r1, r4, r3
 80040b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040bc:	4422      	add	r2, r4
 80040be:	3302      	adds	r3, #2
 80040c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040c4:	e7c2      	b.n	800404c <_printf_common+0x58>
 80040c6:	2301      	movs	r3, #1
 80040c8:	4622      	mov	r2, r4
 80040ca:	4649      	mov	r1, r9
 80040cc:	4638      	mov	r0, r7
 80040ce:	47c0      	blx	r8
 80040d0:	3001      	adds	r0, #1
 80040d2:	d0e6      	beq.n	80040a2 <_printf_common+0xae>
 80040d4:	3601      	adds	r6, #1
 80040d6:	e7d9      	b.n	800408c <_printf_common+0x98>

080040d8 <_printf_i>:
 80040d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040dc:	7e0f      	ldrb	r7, [r1, #24]
 80040de:	4691      	mov	r9, r2
 80040e0:	2f78      	cmp	r7, #120	; 0x78
 80040e2:	4680      	mov	r8, r0
 80040e4:	460c      	mov	r4, r1
 80040e6:	469a      	mov	sl, r3
 80040e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040ee:	d807      	bhi.n	8004100 <_printf_i+0x28>
 80040f0:	2f62      	cmp	r7, #98	; 0x62
 80040f2:	d80a      	bhi.n	800410a <_printf_i+0x32>
 80040f4:	2f00      	cmp	r7, #0
 80040f6:	f000 80d5 	beq.w	80042a4 <_printf_i+0x1cc>
 80040fa:	2f58      	cmp	r7, #88	; 0x58
 80040fc:	f000 80c1 	beq.w	8004282 <_printf_i+0x1aa>
 8004100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004104:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004108:	e03a      	b.n	8004180 <_printf_i+0xa8>
 800410a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800410e:	2b15      	cmp	r3, #21
 8004110:	d8f6      	bhi.n	8004100 <_printf_i+0x28>
 8004112:	a101      	add	r1, pc, #4	; (adr r1, 8004118 <_printf_i+0x40>)
 8004114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004118:	08004171 	.word	0x08004171
 800411c:	08004185 	.word	0x08004185
 8004120:	08004101 	.word	0x08004101
 8004124:	08004101 	.word	0x08004101
 8004128:	08004101 	.word	0x08004101
 800412c:	08004101 	.word	0x08004101
 8004130:	08004185 	.word	0x08004185
 8004134:	08004101 	.word	0x08004101
 8004138:	08004101 	.word	0x08004101
 800413c:	08004101 	.word	0x08004101
 8004140:	08004101 	.word	0x08004101
 8004144:	0800428b 	.word	0x0800428b
 8004148:	080041b1 	.word	0x080041b1
 800414c:	08004245 	.word	0x08004245
 8004150:	08004101 	.word	0x08004101
 8004154:	08004101 	.word	0x08004101
 8004158:	080042ad 	.word	0x080042ad
 800415c:	08004101 	.word	0x08004101
 8004160:	080041b1 	.word	0x080041b1
 8004164:	08004101 	.word	0x08004101
 8004168:	08004101 	.word	0x08004101
 800416c:	0800424d 	.word	0x0800424d
 8004170:	682b      	ldr	r3, [r5, #0]
 8004172:	1d1a      	adds	r2, r3, #4
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	602a      	str	r2, [r5, #0]
 8004178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800417c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004180:	2301      	movs	r3, #1
 8004182:	e0a0      	b.n	80042c6 <_printf_i+0x1ee>
 8004184:	6820      	ldr	r0, [r4, #0]
 8004186:	682b      	ldr	r3, [r5, #0]
 8004188:	0607      	lsls	r7, r0, #24
 800418a:	f103 0104 	add.w	r1, r3, #4
 800418e:	6029      	str	r1, [r5, #0]
 8004190:	d501      	bpl.n	8004196 <_printf_i+0xbe>
 8004192:	681e      	ldr	r6, [r3, #0]
 8004194:	e003      	b.n	800419e <_printf_i+0xc6>
 8004196:	0646      	lsls	r6, r0, #25
 8004198:	d5fb      	bpl.n	8004192 <_printf_i+0xba>
 800419a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800419e:	2e00      	cmp	r6, #0
 80041a0:	da03      	bge.n	80041aa <_printf_i+0xd2>
 80041a2:	232d      	movs	r3, #45	; 0x2d
 80041a4:	4276      	negs	r6, r6
 80041a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041aa:	230a      	movs	r3, #10
 80041ac:	4859      	ldr	r0, [pc, #356]	; (8004314 <_printf_i+0x23c>)
 80041ae:	e012      	b.n	80041d6 <_printf_i+0xfe>
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	6820      	ldr	r0, [r4, #0]
 80041b4:	1d19      	adds	r1, r3, #4
 80041b6:	6029      	str	r1, [r5, #0]
 80041b8:	0605      	lsls	r5, r0, #24
 80041ba:	d501      	bpl.n	80041c0 <_printf_i+0xe8>
 80041bc:	681e      	ldr	r6, [r3, #0]
 80041be:	e002      	b.n	80041c6 <_printf_i+0xee>
 80041c0:	0641      	lsls	r1, r0, #25
 80041c2:	d5fb      	bpl.n	80041bc <_printf_i+0xe4>
 80041c4:	881e      	ldrh	r6, [r3, #0]
 80041c6:	2f6f      	cmp	r7, #111	; 0x6f
 80041c8:	bf0c      	ite	eq
 80041ca:	2308      	moveq	r3, #8
 80041cc:	230a      	movne	r3, #10
 80041ce:	4851      	ldr	r0, [pc, #324]	; (8004314 <_printf_i+0x23c>)
 80041d0:	2100      	movs	r1, #0
 80041d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041d6:	6865      	ldr	r5, [r4, #4]
 80041d8:	2d00      	cmp	r5, #0
 80041da:	bfa8      	it	ge
 80041dc:	6821      	ldrge	r1, [r4, #0]
 80041de:	60a5      	str	r5, [r4, #8]
 80041e0:	bfa4      	itt	ge
 80041e2:	f021 0104 	bicge.w	r1, r1, #4
 80041e6:	6021      	strge	r1, [r4, #0]
 80041e8:	b90e      	cbnz	r6, 80041ee <_printf_i+0x116>
 80041ea:	2d00      	cmp	r5, #0
 80041ec:	d04b      	beq.n	8004286 <_printf_i+0x1ae>
 80041ee:	4615      	mov	r5, r2
 80041f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80041f4:	fb03 6711 	mls	r7, r3, r1, r6
 80041f8:	5dc7      	ldrb	r7, [r0, r7]
 80041fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041fe:	4637      	mov	r7, r6
 8004200:	42bb      	cmp	r3, r7
 8004202:	460e      	mov	r6, r1
 8004204:	d9f4      	bls.n	80041f0 <_printf_i+0x118>
 8004206:	2b08      	cmp	r3, #8
 8004208:	d10b      	bne.n	8004222 <_printf_i+0x14a>
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	07de      	lsls	r6, r3, #31
 800420e:	d508      	bpl.n	8004222 <_printf_i+0x14a>
 8004210:	6923      	ldr	r3, [r4, #16]
 8004212:	6861      	ldr	r1, [r4, #4]
 8004214:	4299      	cmp	r1, r3
 8004216:	bfde      	ittt	le
 8004218:	2330      	movle	r3, #48	; 0x30
 800421a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800421e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004222:	1b52      	subs	r2, r2, r5
 8004224:	6122      	str	r2, [r4, #16]
 8004226:	464b      	mov	r3, r9
 8004228:	4621      	mov	r1, r4
 800422a:	4640      	mov	r0, r8
 800422c:	f8cd a000 	str.w	sl, [sp]
 8004230:	aa03      	add	r2, sp, #12
 8004232:	f7ff fedf 	bl	8003ff4 <_printf_common>
 8004236:	3001      	adds	r0, #1
 8004238:	d14a      	bne.n	80042d0 <_printf_i+0x1f8>
 800423a:	f04f 30ff 	mov.w	r0, #4294967295
 800423e:	b004      	add	sp, #16
 8004240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	f043 0320 	orr.w	r3, r3, #32
 800424a:	6023      	str	r3, [r4, #0]
 800424c:	2778      	movs	r7, #120	; 0x78
 800424e:	4832      	ldr	r0, [pc, #200]	; (8004318 <_printf_i+0x240>)
 8004250:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	6829      	ldr	r1, [r5, #0]
 8004258:	061f      	lsls	r7, r3, #24
 800425a:	f851 6b04 	ldr.w	r6, [r1], #4
 800425e:	d402      	bmi.n	8004266 <_printf_i+0x18e>
 8004260:	065f      	lsls	r7, r3, #25
 8004262:	bf48      	it	mi
 8004264:	b2b6      	uxthmi	r6, r6
 8004266:	07df      	lsls	r7, r3, #31
 8004268:	bf48      	it	mi
 800426a:	f043 0320 	orrmi.w	r3, r3, #32
 800426e:	6029      	str	r1, [r5, #0]
 8004270:	bf48      	it	mi
 8004272:	6023      	strmi	r3, [r4, #0]
 8004274:	b91e      	cbnz	r6, 800427e <_printf_i+0x1a6>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	f023 0320 	bic.w	r3, r3, #32
 800427c:	6023      	str	r3, [r4, #0]
 800427e:	2310      	movs	r3, #16
 8004280:	e7a6      	b.n	80041d0 <_printf_i+0xf8>
 8004282:	4824      	ldr	r0, [pc, #144]	; (8004314 <_printf_i+0x23c>)
 8004284:	e7e4      	b.n	8004250 <_printf_i+0x178>
 8004286:	4615      	mov	r5, r2
 8004288:	e7bd      	b.n	8004206 <_printf_i+0x12e>
 800428a:	682b      	ldr	r3, [r5, #0]
 800428c:	6826      	ldr	r6, [r4, #0]
 800428e:	1d18      	adds	r0, r3, #4
 8004290:	6961      	ldr	r1, [r4, #20]
 8004292:	6028      	str	r0, [r5, #0]
 8004294:	0635      	lsls	r5, r6, #24
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	d501      	bpl.n	800429e <_printf_i+0x1c6>
 800429a:	6019      	str	r1, [r3, #0]
 800429c:	e002      	b.n	80042a4 <_printf_i+0x1cc>
 800429e:	0670      	lsls	r0, r6, #25
 80042a0:	d5fb      	bpl.n	800429a <_printf_i+0x1c2>
 80042a2:	8019      	strh	r1, [r3, #0]
 80042a4:	2300      	movs	r3, #0
 80042a6:	4615      	mov	r5, r2
 80042a8:	6123      	str	r3, [r4, #16]
 80042aa:	e7bc      	b.n	8004226 <_printf_i+0x14e>
 80042ac:	682b      	ldr	r3, [r5, #0]
 80042ae:	2100      	movs	r1, #0
 80042b0:	1d1a      	adds	r2, r3, #4
 80042b2:	602a      	str	r2, [r5, #0]
 80042b4:	681d      	ldr	r5, [r3, #0]
 80042b6:	6862      	ldr	r2, [r4, #4]
 80042b8:	4628      	mov	r0, r5
 80042ba:	f000 f97f 	bl	80045bc <memchr>
 80042be:	b108      	cbz	r0, 80042c4 <_printf_i+0x1ec>
 80042c0:	1b40      	subs	r0, r0, r5
 80042c2:	6060      	str	r0, [r4, #4]
 80042c4:	6863      	ldr	r3, [r4, #4]
 80042c6:	6123      	str	r3, [r4, #16]
 80042c8:	2300      	movs	r3, #0
 80042ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ce:	e7aa      	b.n	8004226 <_printf_i+0x14e>
 80042d0:	462a      	mov	r2, r5
 80042d2:	4649      	mov	r1, r9
 80042d4:	4640      	mov	r0, r8
 80042d6:	6923      	ldr	r3, [r4, #16]
 80042d8:	47d0      	blx	sl
 80042da:	3001      	adds	r0, #1
 80042dc:	d0ad      	beq.n	800423a <_printf_i+0x162>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	079b      	lsls	r3, r3, #30
 80042e2:	d413      	bmi.n	800430c <_printf_i+0x234>
 80042e4:	68e0      	ldr	r0, [r4, #12]
 80042e6:	9b03      	ldr	r3, [sp, #12]
 80042e8:	4298      	cmp	r0, r3
 80042ea:	bfb8      	it	lt
 80042ec:	4618      	movlt	r0, r3
 80042ee:	e7a6      	b.n	800423e <_printf_i+0x166>
 80042f0:	2301      	movs	r3, #1
 80042f2:	4632      	mov	r2, r6
 80042f4:	4649      	mov	r1, r9
 80042f6:	4640      	mov	r0, r8
 80042f8:	47d0      	blx	sl
 80042fa:	3001      	adds	r0, #1
 80042fc:	d09d      	beq.n	800423a <_printf_i+0x162>
 80042fe:	3501      	adds	r5, #1
 8004300:	68e3      	ldr	r3, [r4, #12]
 8004302:	9903      	ldr	r1, [sp, #12]
 8004304:	1a5b      	subs	r3, r3, r1
 8004306:	42ab      	cmp	r3, r5
 8004308:	dcf2      	bgt.n	80042f0 <_printf_i+0x218>
 800430a:	e7eb      	b.n	80042e4 <_printf_i+0x20c>
 800430c:	2500      	movs	r5, #0
 800430e:	f104 0619 	add.w	r6, r4, #25
 8004312:	e7f5      	b.n	8004300 <_printf_i+0x228>
 8004314:	08004753 	.word	0x08004753
 8004318:	08004764 	.word	0x08004764

0800431c <__sflush_r>:
 800431c:	898a      	ldrh	r2, [r1, #12]
 800431e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004320:	4605      	mov	r5, r0
 8004322:	0710      	lsls	r0, r2, #28
 8004324:	460c      	mov	r4, r1
 8004326:	d457      	bmi.n	80043d8 <__sflush_r+0xbc>
 8004328:	684b      	ldr	r3, [r1, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	dc04      	bgt.n	8004338 <__sflush_r+0x1c>
 800432e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004330:	2b00      	cmp	r3, #0
 8004332:	dc01      	bgt.n	8004338 <__sflush_r+0x1c>
 8004334:	2000      	movs	r0, #0
 8004336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800433a:	2e00      	cmp	r6, #0
 800433c:	d0fa      	beq.n	8004334 <__sflush_r+0x18>
 800433e:	2300      	movs	r3, #0
 8004340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004344:	682f      	ldr	r7, [r5, #0]
 8004346:	6a21      	ldr	r1, [r4, #32]
 8004348:	602b      	str	r3, [r5, #0]
 800434a:	d032      	beq.n	80043b2 <__sflush_r+0x96>
 800434c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800434e:	89a3      	ldrh	r3, [r4, #12]
 8004350:	075a      	lsls	r2, r3, #29
 8004352:	d505      	bpl.n	8004360 <__sflush_r+0x44>
 8004354:	6863      	ldr	r3, [r4, #4]
 8004356:	1ac0      	subs	r0, r0, r3
 8004358:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800435a:	b10b      	cbz	r3, 8004360 <__sflush_r+0x44>
 800435c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800435e:	1ac0      	subs	r0, r0, r3
 8004360:	2300      	movs	r3, #0
 8004362:	4602      	mov	r2, r0
 8004364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004366:	4628      	mov	r0, r5
 8004368:	6a21      	ldr	r1, [r4, #32]
 800436a:	47b0      	blx	r6
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	d106      	bne.n	8004380 <__sflush_r+0x64>
 8004372:	6829      	ldr	r1, [r5, #0]
 8004374:	291d      	cmp	r1, #29
 8004376:	d82b      	bhi.n	80043d0 <__sflush_r+0xb4>
 8004378:	4a28      	ldr	r2, [pc, #160]	; (800441c <__sflush_r+0x100>)
 800437a:	410a      	asrs	r2, r1
 800437c:	07d6      	lsls	r6, r2, #31
 800437e:	d427      	bmi.n	80043d0 <__sflush_r+0xb4>
 8004380:	2200      	movs	r2, #0
 8004382:	6062      	str	r2, [r4, #4]
 8004384:	6922      	ldr	r2, [r4, #16]
 8004386:	04d9      	lsls	r1, r3, #19
 8004388:	6022      	str	r2, [r4, #0]
 800438a:	d504      	bpl.n	8004396 <__sflush_r+0x7a>
 800438c:	1c42      	adds	r2, r0, #1
 800438e:	d101      	bne.n	8004394 <__sflush_r+0x78>
 8004390:	682b      	ldr	r3, [r5, #0]
 8004392:	b903      	cbnz	r3, 8004396 <__sflush_r+0x7a>
 8004394:	6560      	str	r0, [r4, #84]	; 0x54
 8004396:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004398:	602f      	str	r7, [r5, #0]
 800439a:	2900      	cmp	r1, #0
 800439c:	d0ca      	beq.n	8004334 <__sflush_r+0x18>
 800439e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043a2:	4299      	cmp	r1, r3
 80043a4:	d002      	beq.n	80043ac <__sflush_r+0x90>
 80043a6:	4628      	mov	r0, r5
 80043a8:	f7ff fbee 	bl	8003b88 <_free_r>
 80043ac:	2000      	movs	r0, #0
 80043ae:	6360      	str	r0, [r4, #52]	; 0x34
 80043b0:	e7c1      	b.n	8004336 <__sflush_r+0x1a>
 80043b2:	2301      	movs	r3, #1
 80043b4:	4628      	mov	r0, r5
 80043b6:	47b0      	blx	r6
 80043b8:	1c41      	adds	r1, r0, #1
 80043ba:	d1c8      	bne.n	800434e <__sflush_r+0x32>
 80043bc:	682b      	ldr	r3, [r5, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0c5      	beq.n	800434e <__sflush_r+0x32>
 80043c2:	2b1d      	cmp	r3, #29
 80043c4:	d001      	beq.n	80043ca <__sflush_r+0xae>
 80043c6:	2b16      	cmp	r3, #22
 80043c8:	d101      	bne.n	80043ce <__sflush_r+0xb2>
 80043ca:	602f      	str	r7, [r5, #0]
 80043cc:	e7b2      	b.n	8004334 <__sflush_r+0x18>
 80043ce:	89a3      	ldrh	r3, [r4, #12]
 80043d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d4:	81a3      	strh	r3, [r4, #12]
 80043d6:	e7ae      	b.n	8004336 <__sflush_r+0x1a>
 80043d8:	690f      	ldr	r7, [r1, #16]
 80043da:	2f00      	cmp	r7, #0
 80043dc:	d0aa      	beq.n	8004334 <__sflush_r+0x18>
 80043de:	0793      	lsls	r3, r2, #30
 80043e0:	bf18      	it	ne
 80043e2:	2300      	movne	r3, #0
 80043e4:	680e      	ldr	r6, [r1, #0]
 80043e6:	bf08      	it	eq
 80043e8:	694b      	ldreq	r3, [r1, #20]
 80043ea:	1bf6      	subs	r6, r6, r7
 80043ec:	600f      	str	r7, [r1, #0]
 80043ee:	608b      	str	r3, [r1, #8]
 80043f0:	2e00      	cmp	r6, #0
 80043f2:	dd9f      	ble.n	8004334 <__sflush_r+0x18>
 80043f4:	4633      	mov	r3, r6
 80043f6:	463a      	mov	r2, r7
 80043f8:	4628      	mov	r0, r5
 80043fa:	6a21      	ldr	r1, [r4, #32]
 80043fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004400:	47e0      	blx	ip
 8004402:	2800      	cmp	r0, #0
 8004404:	dc06      	bgt.n	8004414 <__sflush_r+0xf8>
 8004406:	89a3      	ldrh	r3, [r4, #12]
 8004408:	f04f 30ff 	mov.w	r0, #4294967295
 800440c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004410:	81a3      	strh	r3, [r4, #12]
 8004412:	e790      	b.n	8004336 <__sflush_r+0x1a>
 8004414:	4407      	add	r7, r0
 8004416:	1a36      	subs	r6, r6, r0
 8004418:	e7ea      	b.n	80043f0 <__sflush_r+0xd4>
 800441a:	bf00      	nop
 800441c:	dfbffffe 	.word	0xdfbffffe

08004420 <_fflush_r>:
 8004420:	b538      	push	{r3, r4, r5, lr}
 8004422:	690b      	ldr	r3, [r1, #16]
 8004424:	4605      	mov	r5, r0
 8004426:	460c      	mov	r4, r1
 8004428:	b913      	cbnz	r3, 8004430 <_fflush_r+0x10>
 800442a:	2500      	movs	r5, #0
 800442c:	4628      	mov	r0, r5
 800442e:	bd38      	pop	{r3, r4, r5, pc}
 8004430:	b118      	cbz	r0, 800443a <_fflush_r+0x1a>
 8004432:	6a03      	ldr	r3, [r0, #32]
 8004434:	b90b      	cbnz	r3, 800443a <_fflush_r+0x1a>
 8004436:	f7ff fa9f 	bl	8003978 <__sinit>
 800443a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f3      	beq.n	800442a <_fflush_r+0xa>
 8004442:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004444:	07d0      	lsls	r0, r2, #31
 8004446:	d404      	bmi.n	8004452 <_fflush_r+0x32>
 8004448:	0599      	lsls	r1, r3, #22
 800444a:	d402      	bmi.n	8004452 <_fflush_r+0x32>
 800444c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800444e:	f7ff fb98 	bl	8003b82 <__retarget_lock_acquire_recursive>
 8004452:	4628      	mov	r0, r5
 8004454:	4621      	mov	r1, r4
 8004456:	f7ff ff61 	bl	800431c <__sflush_r>
 800445a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800445c:	4605      	mov	r5, r0
 800445e:	07da      	lsls	r2, r3, #31
 8004460:	d4e4      	bmi.n	800442c <_fflush_r+0xc>
 8004462:	89a3      	ldrh	r3, [r4, #12]
 8004464:	059b      	lsls	r3, r3, #22
 8004466:	d4e1      	bmi.n	800442c <_fflush_r+0xc>
 8004468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800446a:	f7ff fb8b 	bl	8003b84 <__retarget_lock_release_recursive>
 800446e:	e7dd      	b.n	800442c <_fflush_r+0xc>

08004470 <__swbuf_r>:
 8004470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004472:	460e      	mov	r6, r1
 8004474:	4614      	mov	r4, r2
 8004476:	4605      	mov	r5, r0
 8004478:	b118      	cbz	r0, 8004482 <__swbuf_r+0x12>
 800447a:	6a03      	ldr	r3, [r0, #32]
 800447c:	b90b      	cbnz	r3, 8004482 <__swbuf_r+0x12>
 800447e:	f7ff fa7b 	bl	8003978 <__sinit>
 8004482:	69a3      	ldr	r3, [r4, #24]
 8004484:	60a3      	str	r3, [r4, #8]
 8004486:	89a3      	ldrh	r3, [r4, #12]
 8004488:	071a      	lsls	r2, r3, #28
 800448a:	d525      	bpl.n	80044d8 <__swbuf_r+0x68>
 800448c:	6923      	ldr	r3, [r4, #16]
 800448e:	b31b      	cbz	r3, 80044d8 <__swbuf_r+0x68>
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	6922      	ldr	r2, [r4, #16]
 8004494:	b2f6      	uxtb	r6, r6
 8004496:	1a98      	subs	r0, r3, r2
 8004498:	6963      	ldr	r3, [r4, #20]
 800449a:	4637      	mov	r7, r6
 800449c:	4283      	cmp	r3, r0
 800449e:	dc04      	bgt.n	80044aa <__swbuf_r+0x3a>
 80044a0:	4621      	mov	r1, r4
 80044a2:	4628      	mov	r0, r5
 80044a4:	f7ff ffbc 	bl	8004420 <_fflush_r>
 80044a8:	b9e0      	cbnz	r0, 80044e4 <__swbuf_r+0x74>
 80044aa:	68a3      	ldr	r3, [r4, #8]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	60a3      	str	r3, [r4, #8]
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	6022      	str	r2, [r4, #0]
 80044b6:	701e      	strb	r6, [r3, #0]
 80044b8:	6962      	ldr	r2, [r4, #20]
 80044ba:	1c43      	adds	r3, r0, #1
 80044bc:	429a      	cmp	r2, r3
 80044be:	d004      	beq.n	80044ca <__swbuf_r+0x5a>
 80044c0:	89a3      	ldrh	r3, [r4, #12]
 80044c2:	07db      	lsls	r3, r3, #31
 80044c4:	d506      	bpl.n	80044d4 <__swbuf_r+0x64>
 80044c6:	2e0a      	cmp	r6, #10
 80044c8:	d104      	bne.n	80044d4 <__swbuf_r+0x64>
 80044ca:	4621      	mov	r1, r4
 80044cc:	4628      	mov	r0, r5
 80044ce:	f7ff ffa7 	bl	8004420 <_fflush_r>
 80044d2:	b938      	cbnz	r0, 80044e4 <__swbuf_r+0x74>
 80044d4:	4638      	mov	r0, r7
 80044d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044d8:	4621      	mov	r1, r4
 80044da:	4628      	mov	r0, r5
 80044dc:	f000 f806 	bl	80044ec <__swsetup_r>
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d0d5      	beq.n	8004490 <__swbuf_r+0x20>
 80044e4:	f04f 37ff 	mov.w	r7, #4294967295
 80044e8:	e7f4      	b.n	80044d4 <__swbuf_r+0x64>
	...

080044ec <__swsetup_r>:
 80044ec:	b538      	push	{r3, r4, r5, lr}
 80044ee:	4b2a      	ldr	r3, [pc, #168]	; (8004598 <__swsetup_r+0xac>)
 80044f0:	4605      	mov	r5, r0
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	460c      	mov	r4, r1
 80044f6:	b118      	cbz	r0, 8004500 <__swsetup_r+0x14>
 80044f8:	6a03      	ldr	r3, [r0, #32]
 80044fa:	b90b      	cbnz	r3, 8004500 <__swsetup_r+0x14>
 80044fc:	f7ff fa3c 	bl	8003978 <__sinit>
 8004500:	89a3      	ldrh	r3, [r4, #12]
 8004502:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004506:	0718      	lsls	r0, r3, #28
 8004508:	d422      	bmi.n	8004550 <__swsetup_r+0x64>
 800450a:	06d9      	lsls	r1, r3, #27
 800450c:	d407      	bmi.n	800451e <__swsetup_r+0x32>
 800450e:	2309      	movs	r3, #9
 8004510:	602b      	str	r3, [r5, #0]
 8004512:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004516:	f04f 30ff 	mov.w	r0, #4294967295
 800451a:	81a3      	strh	r3, [r4, #12]
 800451c:	e034      	b.n	8004588 <__swsetup_r+0x9c>
 800451e:	0758      	lsls	r0, r3, #29
 8004520:	d512      	bpl.n	8004548 <__swsetup_r+0x5c>
 8004522:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004524:	b141      	cbz	r1, 8004538 <__swsetup_r+0x4c>
 8004526:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800452a:	4299      	cmp	r1, r3
 800452c:	d002      	beq.n	8004534 <__swsetup_r+0x48>
 800452e:	4628      	mov	r0, r5
 8004530:	f7ff fb2a 	bl	8003b88 <_free_r>
 8004534:	2300      	movs	r3, #0
 8004536:	6363      	str	r3, [r4, #52]	; 0x34
 8004538:	89a3      	ldrh	r3, [r4, #12]
 800453a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800453e:	81a3      	strh	r3, [r4, #12]
 8004540:	2300      	movs	r3, #0
 8004542:	6063      	str	r3, [r4, #4]
 8004544:	6923      	ldr	r3, [r4, #16]
 8004546:	6023      	str	r3, [r4, #0]
 8004548:	89a3      	ldrh	r3, [r4, #12]
 800454a:	f043 0308 	orr.w	r3, r3, #8
 800454e:	81a3      	strh	r3, [r4, #12]
 8004550:	6923      	ldr	r3, [r4, #16]
 8004552:	b94b      	cbnz	r3, 8004568 <__swsetup_r+0x7c>
 8004554:	89a3      	ldrh	r3, [r4, #12]
 8004556:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800455a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800455e:	d003      	beq.n	8004568 <__swsetup_r+0x7c>
 8004560:	4621      	mov	r1, r4
 8004562:	4628      	mov	r0, r5
 8004564:	f000 f85d 	bl	8004622 <__smakebuf_r>
 8004568:	89a0      	ldrh	r0, [r4, #12]
 800456a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800456e:	f010 0301 	ands.w	r3, r0, #1
 8004572:	d00a      	beq.n	800458a <__swsetup_r+0x9e>
 8004574:	2300      	movs	r3, #0
 8004576:	60a3      	str	r3, [r4, #8]
 8004578:	6963      	ldr	r3, [r4, #20]
 800457a:	425b      	negs	r3, r3
 800457c:	61a3      	str	r3, [r4, #24]
 800457e:	6923      	ldr	r3, [r4, #16]
 8004580:	b943      	cbnz	r3, 8004594 <__swsetup_r+0xa8>
 8004582:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004586:	d1c4      	bne.n	8004512 <__swsetup_r+0x26>
 8004588:	bd38      	pop	{r3, r4, r5, pc}
 800458a:	0781      	lsls	r1, r0, #30
 800458c:	bf58      	it	pl
 800458e:	6963      	ldrpl	r3, [r4, #20]
 8004590:	60a3      	str	r3, [r4, #8]
 8004592:	e7f4      	b.n	800457e <__swsetup_r+0x92>
 8004594:	2000      	movs	r0, #0
 8004596:	e7f7      	b.n	8004588 <__swsetup_r+0x9c>
 8004598:	20000064 	.word	0x20000064

0800459c <_sbrk_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	2300      	movs	r3, #0
 80045a0:	4d05      	ldr	r5, [pc, #20]	; (80045b8 <_sbrk_r+0x1c>)
 80045a2:	4604      	mov	r4, r0
 80045a4:	4608      	mov	r0, r1
 80045a6:	602b      	str	r3, [r5, #0]
 80045a8:	f7fc fe9a 	bl	80012e0 <_sbrk>
 80045ac:	1c43      	adds	r3, r0, #1
 80045ae:	d102      	bne.n	80045b6 <_sbrk_r+0x1a>
 80045b0:	682b      	ldr	r3, [r5, #0]
 80045b2:	b103      	cbz	r3, 80045b6 <_sbrk_r+0x1a>
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	bd38      	pop	{r3, r4, r5, pc}
 80045b8:	200003e8 	.word	0x200003e8

080045bc <memchr>:
 80045bc:	4603      	mov	r3, r0
 80045be:	b510      	push	{r4, lr}
 80045c0:	b2c9      	uxtb	r1, r1
 80045c2:	4402      	add	r2, r0
 80045c4:	4293      	cmp	r3, r2
 80045c6:	4618      	mov	r0, r3
 80045c8:	d101      	bne.n	80045ce <memchr+0x12>
 80045ca:	2000      	movs	r0, #0
 80045cc:	e003      	b.n	80045d6 <memchr+0x1a>
 80045ce:	7804      	ldrb	r4, [r0, #0]
 80045d0:	3301      	adds	r3, #1
 80045d2:	428c      	cmp	r4, r1
 80045d4:	d1f6      	bne.n	80045c4 <memchr+0x8>
 80045d6:	bd10      	pop	{r4, pc}

080045d8 <__swhatbuf_r>:
 80045d8:	b570      	push	{r4, r5, r6, lr}
 80045da:	460c      	mov	r4, r1
 80045dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e0:	4615      	mov	r5, r2
 80045e2:	2900      	cmp	r1, #0
 80045e4:	461e      	mov	r6, r3
 80045e6:	b096      	sub	sp, #88	; 0x58
 80045e8:	da0c      	bge.n	8004604 <__swhatbuf_r+0x2c>
 80045ea:	89a3      	ldrh	r3, [r4, #12]
 80045ec:	2100      	movs	r1, #0
 80045ee:	f013 0f80 	tst.w	r3, #128	; 0x80
 80045f2:	bf0c      	ite	eq
 80045f4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80045f8:	2340      	movne	r3, #64	; 0x40
 80045fa:	2000      	movs	r0, #0
 80045fc:	6031      	str	r1, [r6, #0]
 80045fe:	602b      	str	r3, [r5, #0]
 8004600:	b016      	add	sp, #88	; 0x58
 8004602:	bd70      	pop	{r4, r5, r6, pc}
 8004604:	466a      	mov	r2, sp
 8004606:	f000 f849 	bl	800469c <_fstat_r>
 800460a:	2800      	cmp	r0, #0
 800460c:	dbed      	blt.n	80045ea <__swhatbuf_r+0x12>
 800460e:	9901      	ldr	r1, [sp, #4]
 8004610:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004614:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004618:	4259      	negs	r1, r3
 800461a:	4159      	adcs	r1, r3
 800461c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004620:	e7eb      	b.n	80045fa <__swhatbuf_r+0x22>

08004622 <__smakebuf_r>:
 8004622:	898b      	ldrh	r3, [r1, #12]
 8004624:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004626:	079d      	lsls	r5, r3, #30
 8004628:	4606      	mov	r6, r0
 800462a:	460c      	mov	r4, r1
 800462c:	d507      	bpl.n	800463e <__smakebuf_r+0x1c>
 800462e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004632:	6023      	str	r3, [r4, #0]
 8004634:	6123      	str	r3, [r4, #16]
 8004636:	2301      	movs	r3, #1
 8004638:	6163      	str	r3, [r4, #20]
 800463a:	b002      	add	sp, #8
 800463c:	bd70      	pop	{r4, r5, r6, pc}
 800463e:	466a      	mov	r2, sp
 8004640:	ab01      	add	r3, sp, #4
 8004642:	f7ff ffc9 	bl	80045d8 <__swhatbuf_r>
 8004646:	9900      	ldr	r1, [sp, #0]
 8004648:	4605      	mov	r5, r0
 800464a:	4630      	mov	r0, r6
 800464c:	f7ff fb04 	bl	8003c58 <_malloc_r>
 8004650:	b948      	cbnz	r0, 8004666 <__smakebuf_r+0x44>
 8004652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004656:	059a      	lsls	r2, r3, #22
 8004658:	d4ef      	bmi.n	800463a <__smakebuf_r+0x18>
 800465a:	f023 0303 	bic.w	r3, r3, #3
 800465e:	f043 0302 	orr.w	r3, r3, #2
 8004662:	81a3      	strh	r3, [r4, #12]
 8004664:	e7e3      	b.n	800462e <__smakebuf_r+0xc>
 8004666:	89a3      	ldrh	r3, [r4, #12]
 8004668:	6020      	str	r0, [r4, #0]
 800466a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466e:	81a3      	strh	r3, [r4, #12]
 8004670:	9b00      	ldr	r3, [sp, #0]
 8004672:	6120      	str	r0, [r4, #16]
 8004674:	6163      	str	r3, [r4, #20]
 8004676:	9b01      	ldr	r3, [sp, #4]
 8004678:	b15b      	cbz	r3, 8004692 <__smakebuf_r+0x70>
 800467a:	4630      	mov	r0, r6
 800467c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004680:	f000 f81e 	bl	80046c0 <_isatty_r>
 8004684:	b128      	cbz	r0, 8004692 <__smakebuf_r+0x70>
 8004686:	89a3      	ldrh	r3, [r4, #12]
 8004688:	f023 0303 	bic.w	r3, r3, #3
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	81a3      	strh	r3, [r4, #12]
 8004692:	89a3      	ldrh	r3, [r4, #12]
 8004694:	431d      	orrs	r5, r3
 8004696:	81a5      	strh	r5, [r4, #12]
 8004698:	e7cf      	b.n	800463a <__smakebuf_r+0x18>
	...

0800469c <_fstat_r>:
 800469c:	b538      	push	{r3, r4, r5, lr}
 800469e:	2300      	movs	r3, #0
 80046a0:	4d06      	ldr	r5, [pc, #24]	; (80046bc <_fstat_r+0x20>)
 80046a2:	4604      	mov	r4, r0
 80046a4:	4608      	mov	r0, r1
 80046a6:	4611      	mov	r1, r2
 80046a8:	602b      	str	r3, [r5, #0]
 80046aa:	f7fc fdf3 	bl	8001294 <_fstat>
 80046ae:	1c43      	adds	r3, r0, #1
 80046b0:	d102      	bne.n	80046b8 <_fstat_r+0x1c>
 80046b2:	682b      	ldr	r3, [r5, #0]
 80046b4:	b103      	cbz	r3, 80046b8 <_fstat_r+0x1c>
 80046b6:	6023      	str	r3, [r4, #0]
 80046b8:	bd38      	pop	{r3, r4, r5, pc}
 80046ba:	bf00      	nop
 80046bc:	200003e8 	.word	0x200003e8

080046c0 <_isatty_r>:
 80046c0:	b538      	push	{r3, r4, r5, lr}
 80046c2:	2300      	movs	r3, #0
 80046c4:	4d05      	ldr	r5, [pc, #20]	; (80046dc <_isatty_r+0x1c>)
 80046c6:	4604      	mov	r4, r0
 80046c8:	4608      	mov	r0, r1
 80046ca:	602b      	str	r3, [r5, #0]
 80046cc:	f7fc fdf1 	bl	80012b2 <_isatty>
 80046d0:	1c43      	adds	r3, r0, #1
 80046d2:	d102      	bne.n	80046da <_isatty_r+0x1a>
 80046d4:	682b      	ldr	r3, [r5, #0]
 80046d6:	b103      	cbz	r3, 80046da <_isatty_r+0x1a>
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	bd38      	pop	{r3, r4, r5, pc}
 80046dc:	200003e8 	.word	0x200003e8

080046e0 <_init>:
 80046e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e2:	bf00      	nop
 80046e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046e6:	bc08      	pop	{r3}
 80046e8:	469e      	mov	lr, r3
 80046ea:	4770      	bx	lr

080046ec <_fini>:
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ee:	bf00      	nop
 80046f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f2:	bc08      	pop	{r3}
 80046f4:	469e      	mov	lr, r3
 80046f6:	4770      	bx	lr
